"use strict";(self.webpackChunkying_blog=self.webpackChunkying_blog||[]).push([[5510],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(9496);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=l(n),g=s,d=m["".concat(i,".").concat(g)]||m[g]||u[g]||o;return n?r.createElement(d,a(a({ref:t},c),{},{components:n})):r.createElement(d,a({ref:t},c))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=g;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[m]="string"==typeof e?e:s,a[1]=p;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2201:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=n(8957),s=(n(9496),n(9613));const o={id:"api-init",sidebar_label:"\u63a5\u53e3\u521d\u59cb\u5316",title:"\u63a5\u53e3\u521d\u59cb\u5316"},a=void 0,p={unversionedId:"ying-chat/api-init",id:"ying-chat/api-init",title:"\u63a5\u53e3\u521d\u59cb\u5316",description:"\u6dfb\u52a0 api \u914d\u7f6e",source:"@site/docs/ying-chat/07-api-init.md",sourceDirName:"ying-chat",slug:"/ying-chat/api-init",permalink:"/docs/ying-chat/api-init",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"api-init",sidebar_label:"\u63a5\u53e3\u521d\u59cb\u5316",title:"\u63a5\u53e3\u521d\u59cb\u5316"},sidebar:"yingChat",previous:{title:"\u4e3b\u9875\u9762\u6837\u5f0f",permalink:"/docs/ying-chat/main-page-style"},next:{title:"\u6ce8\u518c\u63a5\u53e3",permalink:"/docs/ying-chat/register-api"}},i={},l=[{value:"\u6dfb\u52a0 api \u914d\u7f6e",id:"\u6dfb\u52a0-api-\u914d\u7f6e",level:2},{value:"\u5f15\u5165 mysql",id:"\u5f15\u5165-mysql",level:2},{value:"\u7528\u6237\u6a21\u5757\u6dfb\u52a0",id:"\u7528\u6237\u6a21\u5757\u6dfb\u52a0",level:2},{value:"\u7edf\u4e00\u8fc7\u6ee4\u5668",id:"\u7edf\u4e00\u8fc7\u6ee4\u5668",level:2},{value:"\u7edf\u4e00\u62e6\u622a\u5668",id:"\u7edf\u4e00\u62e6\u622a\u5668",level:2}],c={toc:l},m="wrapper";function u(e){let{components:t,...n}=e;return(0,s.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"\u6dfb\u52a0-api-\u914d\u7f6e"},"\u6dfb\u52a0 api \u914d\u7f6e"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"pnpm i @nestjs/config\n")),(0,s.kt)("p",null,"\u5199\u5165\u914d\u7f6e\u6587\u4ef6"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="apps/server/.env"',title:'"apps/server/.env"'},"# api\nSERVER_PORT=3000\nSERVER_PREFIX=/api\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title=".gitignore"',title:'".gitignore"'},"// ...\n.env\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/config/api.config.ts"',title:'"apps/server/src/config/api.config.ts"'},"import { registerAs } from '@nestjs/config'\n\nexport const apiConfig = registerAs('apiConfig', () => {\n  return {\n    port: process.env.SERVER_PORT || 3000,\n    prefix: process.env.SERVER_PREFIX || 'api'\n  }\n})\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/config/index.ts"',title:'"apps/server/src/config/index.ts"'},"export * from './api.config'\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/app.module.ts"',title:'"apps/server/src/app.module.ts"'},"import { Module } from '@nestjs/common'\nimport { UserModule } from './modules/user/user.module'\nimport { ConfigModule } from '@nestjs/config'\nimport { apiConfig } from '@/config'\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [apiConfig]\n    }),\n    UserModule\n  ]\n})\nexport class AppModule {}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/main.ts"',title:'"apps/server/src/main.ts"'},"// ...\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule)\n  const apiConf = app.get<ConfigType<typeof apiConfig>>(apiConfig.KEY)\n  app.setGlobalPrefix(apiConf.prefix)\n  await app.listen(apiConf.port)\n  Logger.log(\n    `Application running on: http://localhost:${apiConf.port}${apiConf.prefix}`,\n    'Main'\n  )\n}\nbootstrap()\n")),(0,s.kt)("h2",{id:"\u5f15\u5165-mysql"},"\u5f15\u5165 mysql"),(0,s.kt)("p",null,"\u5148\u542f\u52a8 docker mysql\uff0c\u521b\u5efa\u8868 ying_chat"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"CREATE SCHEMA ying_chat DEFAULT CHARACTER SET utf8mb4;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"pnpm i @nestjs/typeorm typeorm mysql2\n")),(0,s.kt)("p",null,"\u5199\u5165\u914d\u7f6e\u6587\u4ef6"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="apps/server/.env"',title:'"apps/server/.env"'},"// ...\n# mysql\u914d\u7f6e\nDB_HOST=localhost\nDB_PORT=3306\nDB_USER=root\nDB_PASSWORD=jd123456789\nDB_NAME=ying_chat\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="apps/server/src/config/db.config.ts"',title:'"apps/server/src/config/db.config.ts"'},"import { registerAs } from '@nestjs/config'\n\nexport const dbConfig = registerAs('dbConfig', () => {\n  if (!process.env.DB_HOST) {\n    throw new Error('DB_HOST is not exist')\n  }\n  if (!process.env.DB_PORT) {\n    throw new Error('DB_PORT is not exist')\n  }\n  if (!process.env.DB_USER) {\n    throw new Error('DB_USER is not exist')\n  }\n  if (!process.env.DB_PASSWORD) {\n    throw new Error('DB_PASSWORD is not exist')\n  }\n  if (!process.env.DB_NAME) {\n    throw new Error('DB_NAME is not exist')\n  }\n  return {\n    host: process.env.DB_HOST,\n    port: +process.env.DB_PORT,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME\n  }\n})\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/config/index.ts"',title:'"apps/server/src/config/index.ts"'},"export * from './api.config'\nexport * from './db.config'\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/db/db.module.ts"',title:'"apps/server/src/modules/db/db.module.ts"'},"import { Global, Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { ConfigType } from '@nestjs/config'\nimport { dbConfig } from '@/config'\n\n@Global()\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      useFactory: (dbConf: ConfigType<typeof dbConfig>) => {\n        return {\n          charset: 'utf8mb4',\n          type: 'mysql',\n          host: dbConf.host,\n          port: dbConf.port,\n          username: dbConf.username,\n          password: dbConf.password,\n          database: dbConf.database,\n          synchronize: true,\n          autoLoadEntities: true,\n          logging: true\n        }\n      },\n      inject: [dbConfig.KEY]\n    })\n  ]\n})\nexport class DbModule {}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/app.module.ts"',title:'"apps/server/src/app.module.ts"'},"import { Module } from '@nestjs/common'\nimport { UserModule } from './modules/user/user.module'\nimport { ConfigModule } from '@nestjs/config'\nimport { apiConfig, dbConfig } from '@/config'\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [apiConfig, dbConfig]\n    }),\n    UserModule\n  ]\n})\nexport class AppModule {}\n")),(0,s.kt)("h2",{id:"\u7528\u6237\u6a21\u5757\u6dfb\u52a0"},"\u7528\u6237\u6a21\u5757\u6dfb\u52a0"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/user/entities/user.entity.ts"',title:'"apps/server/src/modules/user/entities/user.entity.ts"'},"import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn\n} from 'typeorm'\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column({\n    length: 32,\n    comment: '\u7528\u6237\u540d',\n    unique: true\n  })\n  username: string\n\n  @Column({\n    length: 50,\n    comment: '\u90ae\u7bb1',\n    unique: true\n  })\n  email: string\n\n  @Column({\n    comment: '\u5bc6\u7801'\n  })\n  password: string\n\n  @Column({\n    length: 32,\n    comment: '\u6635\u79f0',\n    nullable: true\n  })\n  nickname: string\n\n  @Column({\n    length: 50,\n    comment: '\u5934\u50cf',\n    nullable: true\n  })\n  avatar: string\n\n  @CreateDateColumn({\n    comment: '\u521b\u5efa\u65f6\u95f4'\n  })\n  createAt: Date\n\n  @UpdateDateColumn({\n    comment: '\u66f4\u65b0\u65f6\u95f4'\n  })\n  updateAt: Date\n}\n")),(0,s.kt)("p",null,"id \u5217\u662f\u4e3b\u952e\u3001\u81ea\u52a8\u9012\u589e\u3002"),(0,s.kt)("p",null,"username\u3001 password\u3001avatar\uff0c\u90fd\u662f VARCHAR\u3002"),(0,s.kt)("p",null,"createAt \u662f\u521b\u5efa\u65f6\u95f4\uff0cupdateAt \u662f\u66f4\u65b0\u65f6\u95f4\u3002"),(0,s.kt)("p",null,"\u8fd9\u91cc\u7684 @CreateDateColumn \u548c @UpdateDateColumn \u90fd\u662f datetime \u7c7b\u578b\u3002"),(0,s.kt)("p",null,"@CreateDateColumn \u4f1a\u5728\u7b2c\u4e00\u6b21\u4fdd\u5b58\u7684\u65f6\u5019\u8bbe\u7f6e\u4e00\u4e2a\u65f6\u95f4\u6233\uff0c\u4e4b\u540e\u4e00\u76f4\u4e0d\u53d8\u3002"),(0,s.kt)("p",null,"\u800c @UpdateDateColumn \u5219\u662f\u6bcf\u6b21\u66f4\u65b0\u90fd\u4f1a\u4fee\u6539\u8fd9\u4e2a\u65f6\u95f4\u6233\u3002"),(0,s.kt)("p",null,"\u7528\u6765\u4fdd\u5b58\u521b\u5efa\u65f6\u95f4\u548c\u66f4\u65b0\u65f6\u95f4\u5f88\u65b9\u4fbf\u3002"),(0,s.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\u6253\u5370\u4e86 create table \u7684\u5efa\u8868 sql \u8bed\u53e5\u3002"),(0,s.kt)("p",null,"\u7136\u540e\u6211\u4eec\u5728 UserModule \u5f15\u5165 TypeOrm.forFeature \u52a8\u6001\u6a21\u5757\uff0c\u4f20\u5165 User \u7684 entity\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/user/user.module.ts"',title:'"apps/server/src/modules/user/user.module.ts"'},"import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { AuthService } from './auth.service'\nimport { AuthController } from './auth.controller'\nimport { User } from './entities/user.entity'\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [AuthController],\n  providers: [AuthService]\n})\nexport class UserModule {}\n")),(0,s.kt)("p",null,"\u8fd9\u6837\u6a21\u5757\u5185\u7684 UserService \u5c31\u53ef\u4ee5\u6ce8\u5165 User \u5bf9\u5e94\u7684 Repository \u4e86"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/user/auth.service.ts"',title:'"apps/server/src/modules/user/auth.service.ts"'},"import { Injectable } from '@nestjs/common'\nimport { Repository } from 'typeorm'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { User } from './entities/user.entity'\n\n@Injectable()\nexport class AuthService {\n  @InjectRepository(User)\n  private readonly userRepository: Repository<User>\n}\n")),(0,s.kt)("p",null,"\u7136\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7 userRepository \u65b9\u4fbf\u5730\u5bf9 User \u589e\u5220\u6539\u67e5\u3002"),(0,s.kt)("p",null,"\u6211\u4eec\u5728 UserController \u91cc\u6dfb\u52a0\u4e24\u4e2a\u65b9\u6cd5\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/user/auth.controller.ts"',title:'"apps/server/src/modules/user/auth.controller.ts"'},"import { Controller, Post } from '@nestjs/common'\nimport { AuthService } from './auth.service'\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('login')\n  login() {}\n\n  @Post('register')\n  register() {}\n}\n")),(0,s.kt)("h2",{id:"\u7edf\u4e00\u8fc7\u6ee4\u5668"},"\u7edf\u4e00\u8fc7\u6ee4\u5668"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'=title="apps/server/src/common/filter/http-exception.filter.ts"',"":"title"},"import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException\n} from '@nestjs/common'\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp()\n    const response = ctx.getResponse()\n    const request = ctx.getRequest()\n\n    const status = exception.getStatus()\n    const exceptionRes = exception.getResponse()\n\n    const error =\n      typeof response === 'string'\n        ? { message: exceptionRes }\n        : (exceptionRes as object)\n\n    response.status(status).json({\n      status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      ...error\n    })\n  }\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/common/filter/index.ts"',title:'"apps/server/src/common/filter/index.ts"'},"export * from './http-exception.filter'\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/main.ts"',title:'"apps/server/src/main.ts"'},"// ...\nasync function bootstrap() {\n  // ...\n  app.setGlobalPrefix(apiConf.prefix)\n  app.useGlobalFilters(new HttpExceptionFilter())\n  // ..\n}\nbootstrap()\n")),(0,s.kt)("h2",{id:"\u7edf\u4e00\u62e6\u622a\u5668"},"\u7edf\u4e00\u62e6\u622a\u5668"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/common/interceptor/process-time.interceptor.ts"',title:'"apps/server/src/common/interceptor/process-time.interceptor.ts"'},"import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n  Logger\n} from '@nestjs/common'\nimport { Observable } from 'rxjs'\nimport { tap } from 'rxjs/operators'\n\n@Injectable()\nexport class ProcessTimeInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const { method, path } = context.switchToHttp().getRequest()\n    const now = Date.now()\n    return next.handle().pipe(\n      tap(() => {\n        const useTime = Date.now() - now\n        if (useTime > 1000) {\n          Logger.warn(\n            `processing \\x1B[36m${method} ${path}\\x1B[0m \\x1B[31muse ${useTime}ms\\x1B[0m`,\n            ProcessTimeInterceptor.name\n          )\n        } else {\n          Logger.log(\n            `processing \\x1B[36m${method} ${path}\\x1B[0m \\x1B[33muse ${useTime}ms\\x1B[0m`,\n            ProcessTimeInterceptor.name\n          )\n        }\n      })\n    )\n  }\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/common/interceptor/response-wrap.interceptor.ts"',title:'"apps/server/src/common/interceptor/response-wrap.interceptor.ts"'},"import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor\n} from '@nestjs/common'\nimport { map } from 'rxjs/operators'\nimport { Observable } from 'rxjs'\n\ntype ResponseWrap<T> = {\n  status: number\n  data: T\n  message: string\n}\n\n@Injectable()\nexport class ResponseWrapInterceptor<T> implements NestInterceptor<T> {\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler\n  ): Observable<ResponseWrap<T>> {\n    return next.handle().pipe(\n      map((data) => {\n        return { status: 0, data, message: 'success' }\n      })\n    )\n  }\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/common/interceptor/index.ts"',title:'"apps/server/src/common/interceptor/index.ts"'},"export * from './process-time.interceptor'\nexport * from './response-wrap.interceptor'\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/main.ts"',title:'"apps/server/src/main.ts"'},"// ...\nimport { HttpExceptionFilter } from '@/common/filter'\nimport {\n  ProcessTimeInterceptor,\n  ResponseWrapInterceptor\n} from '@/common/interceptor'\n// ...\nasync function bootstrap() {\n  // ...\n  app.setGlobalPrefix(apiConf.prefix)\n  app.useGlobalFilters(new HttpExceptionFilter())\n  app.useGlobalInterceptors(new ProcessTimeInterceptor())\n  app.useGlobalInterceptors(new ResponseWrapInterceptor())\n  // ..\n}\nbootstrap()\n")))}u.isMDXComponent=!0}}]);