"use strict";(self.webpackChunkying_blog=self.webpackChunkying_blog||[]).push([[8699],{9613:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var r=t(9496);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var p=r.createContext({}),u=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(p.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,p=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),c=u(t),m=s,g=c["".concat(p,".").concat(m)]||c[m]||d[m]||o;return t?r.createElement(g,i(i({ref:n},l),{},{components:t})):r.createElement(g,i({ref:n},l))}));function g(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,i=new Array(o);i[0]=m;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a[c]="string"==typeof e?e:s,i[1]=a;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6032:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>u});var r=t(8957),s=(t(9496),t(9613));const o={id:"message-api",sidebar_label:"\u7fa4\u804a api",title:"\u7fa4\u804a api"},i=void 0,a={unversionedId:"ying-chat/message-api",id:"ying-chat/message-api",title:"\u7fa4\u804a api",description:"\u672c\u8282\u6765\u5b9e\u73b0\u7fa4\u6d88\u606f\u76f8\u5173\u7684\u6240\u6709 api\u3002",source:"@site/docs/ying-chat/16-message-api.md",sourceDirName:"ying-chat",slug:"/ying-chat/message-api",permalink:"/docs/ying-chat/message-api",draft:!1,tags:[],version:"current",sidebarPosition:16,frontMatter:{id:"message-api",sidebar_label:"\u7fa4\u804a api",title:"\u7fa4\u804a api"},sidebar:"yingChat",previous:{title:"\u5ba2\u6237\u7aef\u5bf9\u63a5\u7fa4\u7ec4api",permalink:"/docs/ying-chat/docking-group-api"},next:{title:"\u5ba2\u6237\u7aef\u5bf9\u63a5\u7fa4\u804aapi",permalink:"/docs/ying-chat/docking-message-api"}},p={},u=[{value:"\u51c6\u5907",id:"\u51c6\u5907",level:2},{value:"\u679a\u4e3e",id:"\u679a\u4e3e",level:3},{value:"\u5b9e\u4f53",id:"\u5b9e\u4f53",level:3},{value:"DTO",id:"dto",level:3},{value:"\u5b9e\u73b0",id:"\u5b9e\u73b0",level:2},{value:"service",id:"service",level:3},{value:"controller",id:"controller",level:3},{value:"subscriber",id:"subscriber",level:3},{value:"\u52a0\u8f7d",id:"\u52a0\u8f7d",level:3}],l={toc:u},c="wrapper";function d(e){let{components:n,...t}=e;return(0,s.kt)(c,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"\u672c\u8282\u6765\u5b9e\u73b0\u7fa4\u6d88\u606f\u76f8\u5173\u7684\u6240\u6709 api\u3002"),(0,s.kt)("h2",{id:"\u51c6\u5907"},"\u51c6\u5907"),(0,s.kt)("h3",{id:"\u679a\u4e3e"},"\u679a\u4e3e"),(0,s.kt)("p",null,"\u5728",(0,s.kt)("inlineCode",{parentName:"p"},"group.enum.ts"),"\u6dfb\u52a0\u4e00\u4e2a",(0,s.kt)("inlineCode",{parentName:"p"},"GroupMessageType"),"\u679a\u4e3e\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="packages/shared/src/enum/group.enum.ts"',title:'"packages/shared/src/enum/group.enum.ts"'},"// ...\nexport enum GroupMessageType {\n  Text,\n  Image,\n  Video\n}\n")),(0,s.kt)("h3",{id:"\u5b9e\u4f53"},"\u5b9e\u4f53"),(0,s.kt)("p",null,"\u6dfb\u52a0\u4e00\u4e2a",(0,s.kt)("inlineCode",{parentName:"p"},"GroupMessageEntity"),"\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/db/entities/group-message.entity.ts"',title:'"apps/server/src/modules/db/entities/group-message.entity.ts"'},"import { Column, Entity, JoinColumn, ManyToOne, OneToOne } from 'typeorm'\nimport { GroupMessageType } from '@ying-chat/shared'\nimport { BaseEntity } from './base.entity'\nimport { UserEntity } from './user.entity'\nimport { FileEntity } from './file.entity'\n\n@Entity({ name: 'group_message' })\nexport class GroupMessageEntity extends BaseEntity {\n  @Column({\n    type: 'enum',\n    enum: GroupMessageType,\n    comment: '0 Text; 1 Image; 2 Video'\n  })\n  type: GroupMessageType\n\n  @Column({\n    type: 'text',\n    nullable: true\n  })\n  content?: string\n\n  @Column()\n  userId: number\n\n  @ManyToOne(() => UserEntity)\n  @JoinColumn()\n  user: UserEntity\n\n  @Column()\n  groupId: number\n\n  @Column({\n    nullable: true\n  })\n  coverId?: number\n\n  @OneToOne(() => FileEntity)\n  @JoinColumn()\n  cover?: FileEntity\n\n  @Column({\n    nullable: true\n  })\n  fileId?: number\n\n  @OneToOne(() => FileEntity)\n  @JoinColumn()\n  file?: FileEntity\n}\n")),(0,s.kt)("p",null,"\u5bfc\u51fa\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/db/entities/index.ts"',title:'"apps/server/src/modules/db/entities/index.ts"'},"// ...\nexport * from './group-message.entity'\n")),(0,s.kt)("p",null,"\u4fee\u6539\u4e00\u4e0b",(0,s.kt)("inlineCode",{parentName:"p"},"GroupConversationEntity"),"\uff0c\u52a0\u4e86\u4e00\u4e2a",(0,s.kt)("inlineCode",{parentName:"p"},"recentMsg"),"\u4f5c\u4e3a\u5f53\u524d\u7fa4\u804a\u91cc\u7684\u6700\u65b0\u6d88\u606f\uff0c\u4f1a\u5728\u83b7\u53d6\u5217\u8868\u65f6\u8bfb\u53d6\u8fd4\u56de\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title=""',title:'""'},"// ...\nimport { GroupMessageEntity } from './group-message.entity'\n\n@Entity({ name: 'group_conversation' })\nexport class GroupConversationEntity extends BaseEntity {\n  // ...\n\n  recentMsg?: GroupMessageEntity\n\n  // ...\n}\n")),(0,s.kt)("h3",{id:"dto"},"DTO"),(0,s.kt)("p",null,"\u53d1\u9001\u6d88\u606f\u5230\u7fa4\u91cc\u7684 DTO\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="packages/shared/src/dto/send-msg.dto.ts"',title:'"packages/shared/src/dto/send-msg.dto.ts"'},"import { IsNotEmpty, MaxLength } from 'class-validator'\n\nexport class SendMsgDto {\n  @IsNotEmpty()\n  groupId: number\n\n  @MaxLength(5000)\n  @IsNotEmpty()\n  content: string\n}\n")),(0,s.kt)("p",null,"\u83b7\u53d6\u7fa4\u6d88\u606f\u5217\u8868\u7684 DTO\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="packages/shared/src/dto/group-message-list.dto.ts"',title:'"packages/shared/src/dto/group-message-list.dto.ts"'},"import { IsNotEmpty, IsOptional } from 'class-validator'\n\nexport class GroupMessageListDto {\n  @IsNotEmpty()\n  groupId: number\n\n  @IsOptional()\n  curId?: number\n\n  @IsOptional()\n  size?: number\n}\n")),(0,s.kt)("p",null,"\u5bfc\u51fa\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="packages/shared/src/dto/index.ts"',title:'"packages/shared/src/dto/index.ts"'},"// ...\nexport * from './send-msg.dto'\nexport * from './group-message-list.dto'\n")),(0,s.kt)("h2",{id:"\u5b9e\u73b0"},"\u5b9e\u73b0"),(0,s.kt)("h3",{id:"service"},"service"),(0,s.kt)("p",null,"\u5728",(0,s.kt)("inlineCode",{parentName:"p"},"modules"),"\u4e0b\u65b0\u5efa\u4e00\u4e2a",(0,s.kt)("inlineCode",{parentName:"p"},"conversation"),"\u6587\u4ef6\u5939\uff0c\u5148\u6765\u5b9e\u73b0\u4e00\u4e2a",(0,s.kt)("inlineCode",{parentName:"p"},"ConversationService"),"\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/conversation/conversation.service.ts"',title:'"apps/server/src/modules/conversation/conversation.service.ts"'},"import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { LessThan, MoreThan, Repository } from 'typeorm'\nimport {\n  FileType,\n  GroupMessageListDto,\n  GroupMessageType,\n  SendMsgDto\n} from '@ying-chat/shared'\nimport { FileService } from '@/modules/file/file.service'\nimport {\n  GroupConversationEntity,\n  GroupMessageEntity\n} from '@/modules/db/entities'\n\n@Injectable()\nexport class ConversationService {\n  @InjectRepository(GroupConversationEntity)\n  private readonly groupConversationRepository: Repository<GroupConversationEntity>\n\n  @InjectRepository(GroupMessageEntity)\n  private readonly groupMessageRepository: Repository<GroupMessageEntity>\n\n  @Inject()\n  private readonly fileService: FileService\n\n  async getGroupConversationList(userId: number) {\n    const res = await this.groupConversationRepository.find({\n      where: {\n        userId\n      },\n      relations: ['group', 'group.cover'],\n      order: {\n        updateAt: 'DESC'\n      }\n    })\n    return res\n  }\n\n  async getGroupConversationMessageList(\n    userId: number,\n    groupMessageListDto: GroupMessageListDto\n  ) {\n    await this.checkUserInGroup(userId, groupMessageListDto.groupId)\n\n    return this.groupMessageRepository.find({\n      where: {\n        groupId: groupMessageListDto.groupId,\n        id: groupMessageListDto.cursorId\n          ? LessThan(groupMessageListDto.cursorId)\n          : undefined\n      },\n      order: {\n        id: 'DESC'\n      },\n      take: groupMessageListDto.size || 10,\n      relations: ['user', 'user.avatar', 'file', 'cover']\n    })\n  }\n\n  async sendTextGroupMessage(userId: number, sendMsgDto: SendMsgDto) {\n    await this.checkUserInGroup(userId, sendMsgDto.groupId)\n\n    const message = new GroupMessageEntity()\n    message.userId = userId\n    message.groupId = sendMsgDto.groupId\n    message.content = sendMsgDto.content\n    message.type = GroupMessageType.Text\n\n    const res = await this.groupMessageRepository.save(message)\n\n    return res\n  }\n\n  async sendImageGroupMessage(\n    userId: number,\n    groupId: number,\n    file: Express.Multer.File\n  ) {\n    await this.checkUserInGroup(userId, groupId)\n\n    const minioFile = await this.fileService.uploadFile({\n      file,\n      fileType: FileType.Image,\n      userId\n    })\n\n    const message = new GroupMessageEntity()\n    message.userId = userId\n    message.groupId = groupId\n    message.type = GroupMessageType.Image\n    message.fileId = minioFile.id\n\n    const res = await this.groupMessageRepository.save(message)\n\n    return res\n  }\n\n  async sendVideoGroupMessage(\n    userId: number,\n    groupId: number,\n    videoFile: Express.Multer.File,\n    coverFile: Express.Multer.File\n  ) {\n    await this.checkUserInGroup(userId, groupId)\n\n    const [minioVideoFile, minioCoverFile] = await Promise.all([\n      this.fileService.uploadFile({\n        file: videoFile,\n        fileType: FileType.Video,\n        userId\n      }),\n      this.fileService.uploadFile({\n        file: coverFile,\n        fileType: FileType.Cover,\n        userId\n      })\n    ])\n\n    const message = new GroupMessageEntity()\n    message.userId = userId\n    message.groupId = groupId\n    message.type = GroupMessageType.Video\n    message.fileId = minioVideoFile.id\n    message.coverId = minioCoverFile.id\n\n    const res = await this.groupMessageRepository.save(message)\n\n    return res\n  }\n\n  async checkUserInGroup(userId: number, groupId: number) {\n    const exist = await this.groupConversationRepository.findOne({\n      where: {\n        userId,\n        groupId\n      }\n    })\n    if (!exist) {\n      throw new HttpException(\n        'you are not in the group!',\n        HttpStatus.NOT_ACCEPTABLE\n      )\n    }\n  }\n\n  findRecentGroupMessage(groupId: number) {\n    return this.groupMessageRepository.findOne({\n      where: {\n        groupId\n      },\n      order: {\n        id: 'DESC'\n      },\n      relations: ['user']\n    })\n  }\n\n  findUnreadGroupMessageNum(groupId: number, lastMsgId: number) {\n    return this.groupMessageRepository.count({\n      where: {\n        groupId,\n        id: MoreThan(lastMsgId)\n      }\n    })\n  }\n}\n")),(0,s.kt)("h3",{id:"controller"},"controller"),(0,s.kt)("p",null,"\u7f16\u5199",(0,s.kt)("inlineCode",{parentName:"p"},"ConversationController"),"\uff0c\u76f4\u63a5\u5b9e\u73b0\u83b7\u53d6\u7528\u6237\u5bf9\u8bdd\u5217\u8868\uff0c\u7528\u6237\u6d88\u606f\u5217\u8868\u548c\u53d1\u9001\u6587\u5b57\u3001\u56fe\u7247\u3001\u89c6\u9891\u6d88\u606f\u7684\u63a5\u53e3\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/conversation/conversation.controller.ts"',title:'"apps/server/src/modules/conversation/conversation.controller.ts"'},"import {\n  Body,\n  Controller,\n  FileTypeValidator,\n  Get,\n  HttpException,\n  HttpStatus,\n  MaxFileSizeValidator,\n  ParseFilePipe,\n  Post,\n  Query,\n  Req,\n  UploadedFile,\n  UploadedFiles,\n  UseInterceptors\n} from '@nestjs/common'\nimport { Request } from 'express'\nimport { ApiOperation, ApiTags } from '@nestjs/swagger'\nimport { AnyFilesInterceptor, FileInterceptor } from '@nestjs/platform-express'\nimport { GroupMessageListDto, SendMsgDto } from '@ying-chat/shared'\nimport { ConversationService } from './conversation.service'\n\n@ApiTags('conversation')\n@Controller('conversation')\nexport class ConversationController {\n  constructor(private readonly conversationService: ConversationService) {}\n\n  @ApiOperation({\n    summary: 'Get conversation list'\n  })\n  @Get('list')\n  getGroupConversationList(@Req() req: Request) {\n    return this.conversationService.getGroupConversationList(req.userId)\n  }\n\n  @ApiOperation({\n    summary: 'Get group message list'\n  })\n  @Get('group/message/list')\n  getGroupConversationMessageList(\n    @Req() req: Request,\n    @Query() groupMessageListDto: GroupMessageListDto\n  ) {\n    return this.conversationService.getGroupConversationMessageList(\n      req.userId,\n      groupMessageListDto\n    )\n  }\n\n  @ApiOperation({\n    summary: 'Send text message to group'\n  })\n  @Post('group/message/text')\n  sendTextGroupMessage(@Req() req: Request, @Body() sendMsgDto: SendMsgDto) {\n    return this.conversationService.sendTextGroupMessage(req.userId, sendMsgDto)\n  }\n\n  @ApiOperation({\n    summary: 'Send image message to group'\n  })\n  @Post('group/message/image')\n  @UseInterceptors(FileInterceptor('file'))\n  sendImageGroupMessage(\n    @Req() req: Request,\n    @UploadedFile(\n      new ParseFilePipe({\n        validators: [\n          new MaxFileSizeValidator({\n            maxSize: 10 * 1024 * 1024,\n            message: 'size must less than 10MB'\n          }),\n          new FileTypeValidator({ fileType: /image\\/(png|jpeg|jpg)/ })\n        ]\n      })\n    )\n    file: Express.Multer.File,\n    @Body('groupId') groupId: string\n  ) {\n    return this.conversationService.sendImageGroupMessage(\n      req.userId,\n      +groupId,\n      file\n    )\n  }\n\n  @ApiOperation({\n    summary: 'Send video message to group'\n  })\n  @Post('group/message/video')\n  @UseInterceptors(AnyFilesInterceptor())\n  sendVideoGroupMessage(\n    @Req() req: Request,\n    @UploadedFiles()\n    files: Express.Multer.File[],\n    @Body('groupId') groupId: number\n  ) {\n    const videoFile = files[0]\n    const coverFile = files[1]\n\n    if (videoFile.size > 1024 * 1024 * 1024) {\n      throw new HttpException(\n        'video size must be less than 1GB',\n        HttpStatus.NOT_ACCEPTABLE\n      )\n    }\n\n    if (coverFile.size > 5 * 1024 * 1024) {\n      throw new HttpException(\n        'cover size must be less than 5MB',\n        HttpStatus.NOT_ACCEPTABLE\n      )\n    }\n\n    return this.conversationService.sendVideoGroupMessage(\n      req.userId,\n      +groupId,\n      videoFile,\n      coverFile\n    )\n  }\n}\n")),(0,s.kt)("h3",{id:"subscriber"},"subscriber"),(0,s.kt)("p",null,"\u7f16\u5199",(0,s.kt)("inlineCode",{parentName:"p"},"GroupConversationSubscriber"),"\uff0c\u8ba9\u7528\u6237\u52a0\u8f7d\u4f1a\u8bdd\u65f6\uff0c\u83b7\u53d6\u6700\u65b0\u7684\u4fe1\u606f\u548c\u5b83\u7684\u6d88\u606f\u672a\u8bfb\u6570\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/conversation/conversation.subscriber.ts"',title:'"apps/server/src/modules/conversation/conversation.subscriber.ts"'},"import { DataSource, EntitySubscriberInterface, EventSubscriber } from 'typeorm'\nimport { GroupConversationEntity } from '@/modules/db/entities'\nimport { ConversationService } from './conversation.service'\n\n@EventSubscriber()\nexport class GroupConversationSubscriber\n  implements EntitySubscriberInterface<GroupConversationEntity>\n{\n  constructor(\n    dataSource: DataSource,\n    private conversationService: ConversationService\n  ) {\n    dataSource.subscribers.push(this)\n  }\n\n  listenTo() {\n    return GroupConversationEntity\n  }\n\n  async afterLoad(entity: GroupConversationEntity) {\n    entity.recentMsg = await this.conversationService.findRecentGroupMessage(\n      entity.groupId\n    )\n\n    if (entity.lastMsgId) {\n      entity.unreadNum =\n        await this.conversationService.findUnreadGroupMessageNum(\n          entity.groupId,\n          entity.lastMsgId\n        )\n    }\n  }\n}\n")),(0,s.kt)("h3",{id:"\u52a0\u8f7d"},"\u52a0\u8f7d"),(0,s.kt)("p",null,"\u521b\u5efa",(0,s.kt)("inlineCode",{parentName:"p"},"ConversationModule"),"\u52a0\u8f7d",(0,s.kt)("inlineCode",{parentName:"p"},"ConversationController"),"\u548c",(0,s.kt)("inlineCode",{parentName:"p"},"ConversationService"),"\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/conversation/conversation.module.ts"',title:'"apps/server/src/modules/conversation/conversation.module.ts"'},"import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport {\n  GroupEntity,\n  GroupConversationEntity,\n  GroupMessageEntity\n} from '@/modules/db/entities'\nimport { ConversationService } from './conversation.service'\nimport { ConversationController } from './conversation.controller'\nimport { GroupConversationSubscriber } from './conversation.subscriber'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      GroupEntity,\n      GroupConversationEntity,\n      GroupMessageEntity\n    ])\n  ],\n  controllers: [ConversationController],\n  providers: [ConversationService, GroupConversationSubscriber]\n})\nexport class ConversationModule {}\n")),(0,s.kt)("p",null,"\u6700\u540e\u5728",(0,s.kt)("inlineCode",{parentName:"p"},"AppModule"),"\u91cc\u5bfc\u5165\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/app.module.ts"',title:'"apps/server/src/app.module.ts"'},"// ...\nimport { ConversationModule } from '@/modules/conversation/conversation.module'\n\n@Module({\n  imports: [\n    // ...\n    ConversationModule\n  ]\n  // ...\n})\nexport class AppModule {}\n")),(0,s.kt)("p",null,"\u90a3\u4e48\u672c\u8282\u6700\u540e\u5c31\u4e0d\u53bb\u8c03\u8bd5\u63a5\u53e3\u4e86\uff0c\u5728\u540e\u9762\u4e00\u8282\u5ba2\u6237\u7aef\u76f4\u63a5\u5bf9\u63a5\u4e00\u4e0b\uff0c\u672c\u8282\u5230\u6b64\u7ed3\u675f\u3002"))}d.isMDXComponent=!0}}]);