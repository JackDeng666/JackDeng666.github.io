"use strict";(self.webpackChunkying_blog=self.webpackChunkying_blog||[]).push([[7884],{4032:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var s=n(3274),t=n(9128);const o={id:"realtime-message-and-socket.io",sidebar_label:"\u4f7f\u7528socket.io\u5b9e\u73b0\u5373\u65f6\u901a\u8baf",title:"\u4f7f\u7528socket.io\u5b9e\u73b0\u5373\u65f6\u901a\u8baf"},i=void 0,a={id:"ying-chat/realtime-message-and-socket.io",title:"\u4f7f\u7528socket.io\u5b9e\u73b0\u5373\u65f6\u901a\u8baf",description:"\u672c\u8282\u6765\u5b9e\u73b0\u670d\u52a1\u7aef\u7684\u5373\u65f6\u901a\u8baf api\u3002",source:"@site/docs/ying-chat/19-realtime-message-and-socket.io.md",sourceDirName:"ying-chat",slug:"/ying-chat/realtime-message-and-socket.io",permalink:"/docs/ying-chat/realtime-message-and-socket.io",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:19,frontMatter:{id:"realtime-message-and-socket.io",sidebar_label:"\u4f7f\u7528socket.io\u5b9e\u73b0\u5373\u65f6\u901a\u8baf",title:"\u4f7f\u7528socket.io\u5b9e\u73b0\u5373\u65f6\u901a\u8baf"},sidebar:"yingChat",previous:{title:"\u9884\u89c8\u7ec4\u4ef6\u548c\u8def\u7531\u7f13\u5b58",permalink:"/docs/ying-chat/preview-component-and-router-cache"},next:{title:"\u5ba2\u6237\u7aef\u5bf9\u63a5\u5373\u65f6\u901a\u8baf",permalink:"/docs/ying-chat/docking-realtime-message"}},c={},d=[{value:"\u51c6\u5907",id:"\u51c6\u5907",level:3},{value:"ConversationGateway \u6dfb\u52a0",id:"conversationgateway-\u6dfb\u52a0",level:3},{value:"ConversationService \u4fee\u6539",id:"conversationservice-\u4fee\u6539",level:3},{value:"GroupService \u4fee\u6539",id:"groupservice-\u4fee\u6539",level:3}];function u(e){const r={code:"code",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.p,{children:"\u672c\u8282\u6765\u5b9e\u73b0\u670d\u52a1\u7aef\u7684\u5373\u65f6\u901a\u8baf api\u3002"}),"\n",(0,s.jsx)(r.h3,{id:"\u51c6\u5907",children:"\u51c6\u5907"}),"\n",(0,s.jsx)(r.p,{children:"\u670d\u52a1\u7aef\u5b89\u88c5\u4f9d\u8d56"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-shell",metastring:'title="apps/server"',children:"pnpm i @nestjs/websockets @nestjs/platform-socket.io socket.io\n"})}),"\n",(0,s.jsxs)(r.p,{children:["\u5148\u5728 ",(0,s.jsx)(r.code,{children:"redis"})," \u91cc\u6dfb\u52a0\u4e00\u4e2a",(0,s.jsx)(r.code,{children:"GroupUsers"}),"\u7684 key\uff0c\u5230\u65f6\u7fa4\u91cc\u7528\u6237\u7684 id \u5c06\u5b58\u5230\u8fd9\u91cc\uff0c\u8fd9\u6837\u6bcf\u6b21\u53d1\u9001\u6d88\u606f\u65f6\u5c31\u4e0d\u7528\u67e5\u8be2\u6570\u636e\u5e93\u4e86\u3002"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:'title="apps/server/src/modules/redis/constant.ts"',children:"// ...\r\nexport const RedisKey = {\r\n  // ...\r\n  GroupUsers: 'group_users:'\r\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"conversationgateway-\u6dfb\u52a0",children:"ConversationGateway \u6dfb\u52a0"}),"\n",(0,s.jsxs)(r.p,{children:["\u6dfb\u52a0\u4e00\u4e2a",(0,s.jsx)(r.code,{children:"ConversationGateway"}),"\u6587\u4ef6\u3002"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:'title="apps/server/src/modules/conversation/conversation.gateway.ts"',children:"import { Inject } from '@nestjs/common'\r\nimport {\r\n  ConnectedSocket,\r\n  MessageBody,\r\n  OnGatewayConnection,\r\n  OnGatewayDisconnect,\r\n  SubscribeMessage,\r\n  WebSocketGateway,\r\n  WebSocketServer\r\n} from '@nestjs/websockets'\r\nimport { RedisClientType } from 'redis'\r\nimport { Server, Socket } from 'socket.io'\r\nimport { Repository } from 'typeorm'\r\nimport { RedisKey, RedisToken } from '@/modules/redis/constant'\r\nimport { AuthService } from '@/modules/user/auth.service'\r\nimport { InjectRepository } from '@nestjs/typeorm'\r\nimport {\r\n  GroupEntity,\r\n  GroupConversationEntity,\r\n  GroupMessageEntity\r\n} from '@/modules/db/entities'\r\n\r\ndeclare module 'socket.io' {\r\n  interface Socket {\r\n    userId: number\r\n  }\r\n}\r\n\r\n@WebSocketGateway()\r\nexport class ConversationGateway\r\n  implements OnGatewayConnection, OnGatewayDisconnect\r\n{\r\n  @Inject()\r\n  private readonly authService: AuthService\r\n  @Inject(RedisToken)\r\n  private readonly redisClient: RedisClientType\r\n\r\n  @InjectRepository(GroupEntity)\r\n  private readonly groupRepository: Repository<GroupEntity>\r\n  @InjectRepository(GroupConversationEntity)\r\n  private readonly groupConversationRepository: Repository<GroupConversationEntity>\r\n\r\n  @WebSocketServer() server: Server\r\n\r\n  private userClientMap: Map<number, string> = new Map()\r\n\r\n  afterInit() {\r\n    this.initGroupMap()\r\n  }\r\n\r\n  async initGroupMap() {\r\n    const groups = await this.groupRepository.find({\r\n      relations: ['users']\r\n    })\r\n    groups.forEach(group => {\r\n      group.users.forEach(user => {\r\n        this.redisClient.sAdd(`${RedisKey.GroupUsers}${group.id}`, user.id + '')\r\n      })\r\n    })\r\n  }\r\n\r\n  async handleConnection(client: Socket) {\r\n    const token = client.handshake.headers.authorization\r\n\r\n    try {\r\n      const verifyData = this.authService.verify(token)\r\n      const id = Number(await this.redisClient.get(token))\r\n\r\n      if (id === verifyData.id) {\r\n        client.userId = id\r\n        this.userClientMap.set(client.userId, client.id)\r\n        return\r\n      }\r\n      this.authFail(client)\r\n    } catch {\r\n      this.authFail(client)\r\n    }\r\n  }\r\n\r\n  handleDisconnect(client: Socket) {\r\n    this.userClientMap.delete(client.userId)\r\n  }\r\n\r\n  authFail(client: Socket) {\r\n    client.emit('authFail')\r\n    client.disconnect(true)\r\n  }\r\n\r\n  @SubscribeMessage('update-last-msg')\r\n  async updateLastMsg(\r\n    @ConnectedSocket() client: Socket,\r\n    @MessageBody() data: { id: number; messageId: number }\r\n  ) {\r\n    await this.groupConversationRepository.update(\r\n      { id: data.id, userId: client.userId },\r\n      { lastMsgId: data.messageId }\r\n    )\r\n\r\n    const groupConversation = await this.groupConversationRepository.findOne({\r\n      where: { id: data.id, userId: client.userId }\r\n    })\r\n\r\n    return {\r\n      event: 'update-last-msg',\r\n      data: groupConversation\r\n    }\r\n  }\r\n\r\n  async sendMsgToGroup(groupMsg: GroupMessageEntity) {\r\n    const userIds = await this.redisClient.sMembers(\r\n      `${RedisKey.GroupUsers}${groupMsg.groupId}`\r\n    )\r\n\r\n    userIds.forEach(userId => {\r\n      const clientId = this.userClientMap.get(+userId)\r\n      if (clientId) {\r\n        this.server\r\n          .to(clientId)\r\n          .emit(`group-message:${groupMsg.groupId}`, groupMsg)\r\n      }\r\n    })\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"websocket \u8fde\u63a5\u662f\u7531 http \u8bf7\u6c42 upgrade \u6210\u529f\u540e\u521b\u5efa\uff0c\u5bf9\u5e94\u4e8e gateway \u7684 handleConnection \u65b9\u6cd5\uff0c\u800c nest \u7684 guard \u672c\u8eab\u4e5f\u9002\u7528\u4e8e gateway\uff0c\u4f46\u4e0d\u5e78\u7684\u662f\u53ea\u4f5c\u7528\u4e8e@SubscribeMessage \u88c5\u9970\u7684\u65b9\u6cd5\uff0c\u8fde\u63a5\u7684\u751f\u547d\u5468\u671f\u4e8b\u4ef6\u4e0d\u53d7\u5f71\u54cd\uff0c\u6240\u4ee5\u9700\u8981\u5728 handleConnection \u4e2d\u5355\u72ec\u505a\u9274\u6743\uff0c\u5176\u4ed6 @SubscribeMessage \u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7 guard \u7edf\u4e00\u5904\u7406\u3002"}),"\n",(0,s.jsxs)(r.p,{children:["\u5728",(0,s.jsx)(r.code,{children:"ConversationModule"}),"\u91cc\u5f15\u5165\u4e00\u4e0b\uff0c\u56e0\u4e3a",(0,s.jsx)(r.code,{children:"ConversationGateway"}),"\u4f7f\u7528\u5230\u4e86",(0,s.jsx)(r.code,{children:"AuthService"}),"\uff0c\u6240\u4ee5\u8fd8\u8981\u628a",(0,s.jsx)(r.code,{children:"UserModule"}),"\u5f15\u5165\u4e00\u4e0b\u3002"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:'title="apps/server/src/modules/conversation/conversation.module.ts"',children:"// ...\r\nimport { ConversationGateway } from './conversation.gateway'\r\nimport { UserModule } from '@/modules/user/user.module'\r\n\r\n@Module({\r\n  imports: [\r\n    //...\r\n    UserModule\r\n  ],\r\n  // ...\r\n  providers: [\r\n    // ...\r\n    ConversationGateway\r\n  ]\r\n})\r\nexport class ConversationModule {}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"conversationservice-\u4fee\u6539",children:"ConversationService \u4fee\u6539"}),"\n",(0,s.jsxs)(r.p,{children:["\u4fee\u6539\u4e00\u4e0b",(0,s.jsx)(r.code,{children:"ConversationService"}),"\uff0c\u8ba9\u6240\u6709\u53d1\u9001\u6d88\u606f\u7684\u63a5\u53e3\u53d1\u9001\u5b8c\u540e\u901a\u77e5 socket \u53bb\u53d1\u9001\u5230\u5f53\u524d\u8fde\u63a5\u7684\u7528\u6237\u3002"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:'title="apps/server/src/modules/conversation/conversation.service.ts"',children:"// ...\r\nimport { ConversationGateway } from './conversation.gateway'\r\n\r\n@Injectable()\r\nexport class ConversationService {\r\n  // ...\r\n\r\n  @Inject()\r\n  private readonly conversationGateway: ConversationGateway\r\n\r\n  // ...\r\n\r\n  async sendTextGroupMessage() {\r\n    // ...\r\n    const res = await this.groupMessageRepository.save(message)\r\n\r\n    this.sendMsgToGroup(res.id) // +\r\n\r\n    return res\r\n  }\r\n\r\n  async sendImageGroupMessage() {\r\n    // ...\r\n\r\n    const res = await this.groupMessageRepository.save(message)\r\n\r\n    this.sendMsgToGroup(res.id) // +\r\n\r\n    return res\r\n  }\r\n\r\n  async sendVideoGroupMessage() {\r\n    // ...\r\n\r\n    const res = await this.groupMessageRepository.save(message)\r\n\r\n    this.sendMsgToGroup(res.id) // +\r\n\r\n    return res\r\n  }\r\n\r\n  // ...\r\n\r\n  async sendMsgToGroup(id: number) {\r\n    const newMessage = await this.groupMessageRepository.findOne({\r\n      where: { id },\r\n      relations: ['user', 'user.avatar', 'file', 'cover']\r\n    })\r\n\r\n    this.conversationGateway.sendMsgToGroup(newMessage)\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"groupservice-\u4fee\u6539",children:"GroupService \u4fee\u6539"}),"\n",(0,s.jsxs)(r.p,{children:["\u6700\u540e\u518d\u4fee\u6539\u4e00\u4e0b",(0,s.jsx)(r.code,{children:"GroupService"}),"\uff0c\u8ba9\u5efa\u7fa4\u548c\u52a0\u7fa4\u65f6",(0,s.jsx)(r.code,{children:"redis"}),"\u4e0a\u7684\u7fa4\u7528\u6237 id \u80fd\u66f4\u65b0\u3002"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:'title="apps/server/src/modules/group/group.service.ts"',children:"// ...\r\nimport { RedisClientType } from 'redis'\r\nimport { RedisKey, RedisToken } from '@/modules/redis/constant'\r\n\r\n@Injectable()\r\nexport class GroupService {\r\n  // ...\r\n\r\n  @Inject(RedisToken)\r\n  private readonly redisClient: RedisClientType\r\n\r\n  async create(createGroupDto: CreateGroupDto, userId: number) {\r\n    // ...\r\n    await this.redisClient.sAdd(\r\n      `${RedisKey.GroupUsers}${group.id}`,\r\n      userId + ''\r\n    )\r\n\r\n    return group\r\n  }\r\n  // ...\r\n\r\n  async joinGroup(userId: number, inviteCode: string) {\r\n    // ...\r\n    await this.redisClient.sAdd(\r\n      `${RedisKey.GroupUsers}${group.id}`,\r\n      userId + ''\r\n    )\r\n  }\r\n  // ...\r\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"\u90a3\u4e48\u672c\u8282\u5230\u6b64\u7ed3\u675f\uff0c\u4e0b\u8282\u5c06\u5728\u5ba2\u6237\u7aef\u5bf9\u63a5\u5373\u65f6\u901a\u4fe1\u3002"})]})}function l(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},9128:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>a});var s=n(9474);const t={},o=s.createContext(t);function i(e){const r=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(o.Provider,{value:r},e.children)}}}]);