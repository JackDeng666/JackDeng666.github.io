"use strict";(self.webpackChunkying_blog=self.webpackChunkying_blog||[]).push([[5082],{9613:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var r=t(9496);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(t),g=s,d=p["".concat(l,".").concat(g)]||p[g]||m[g]||o;return t?r.createElement(d,a(a({ref:n},u),{},{components:t})):r.createElement(d,a({ref:n},u))}));function d(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,a=new Array(o);a[0]=g;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[p]="string"==typeof e?e:s,a[1]=i;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},9345:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=t(8957),s=(t(9496),t(9613));const o={id:"client-docking-login-register",sidebar_label:"\u524d\u7aef\u5bf9\u63a5\u767b\u5f55\u6ce8\u518c",title:"\u524d\u7aef\u5bf9\u63a5\u767b\u5f55\u6ce8\u518c"},a=void 0,i={unversionedId:"ying-chat/client-docking-login-register",id:"ying-chat/client-docking-login-register",title:"\u524d\u7aef\u5bf9\u63a5\u767b\u5f55\u6ce8\u518c",description:"\u5c01\u88c5 axios",source:"@site/docs/ying-chat/11-client-docking-login-register.md",sourceDirName:"ying-chat",slug:"/ying-chat/client-docking-login-register",permalink:"/docs/ying-chat/client-docking-login-register",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{id:"client-docking-login-register",sidebar_label:"\u524d\u7aef\u5bf9\u63a5\u767b\u5f55\u6ce8\u518c",title:"\u524d\u7aef\u5bf9\u63a5\u767b\u5f55\u6ce8\u518c"},sidebar:"yingChat",previous:{title:"\u767b\u5f55\u4e0e\u9274\u6743\u5b9e\u73b0",permalink:"/docs/ying-chat/login-and-auth-api"}},l={},c=[{value:"\u5c01\u88c5 axios",id:"\u5c01\u88c5-axios",level:3},{value:"\u4f7f\u7528 zustand \u8fdb\u884c\u72b6\u6001\u7ba1\u7406",id:"\u4f7f\u7528-zustand-\u8fdb\u884c\u72b6\u6001\u7ba1\u7406",level:3},{value:"\u5bf9\u63a5\u767b\u5f55\u6ce8\u518c",id:"\u5bf9\u63a5\u767b\u5f55\u6ce8\u518c",level:3},{value:"\u6dfb\u52a0\u8def\u7531\u5b88\u536b\u903b\u8f91",id:"\u6dfb\u52a0\u8def\u7531\u5b88\u536b\u903b\u8f91",level:3},{value:"\u6dfb\u52a0\u9000\u51fa\u767b\u5f55\u529f\u80fd",id:"\u6dfb\u52a0\u9000\u51fa\u767b\u5f55\u529f\u80fd",level:3},{value:"\u7ec4\u4ef6\u5916\u4f7f\u7528 antd \u51fd\u6570\u7ec4\u4ef6",id:"\u7ec4\u4ef6\u5916\u4f7f\u7528-antd-\u51fd\u6570\u7ec4\u4ef6",level:3}],u={toc:c},p="wrapper";function m(e){let{components:n,...t}=e;return(0,s.kt)(p,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h3",{id:"\u5c01\u88c5-axios"},"\u5c01\u88c5 axios"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"pnpm i axios\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/src/api/request.ts"',title:'"apps/client/src/api/request.ts"'},"import axios, { AxiosError } from 'axios'\nimport { message } from '@/providers/antd-fc-provider'\nimport { TOKEN, resetAuth } from '@/stores'\n\nexport const request = axios.create({\n  baseURL: '/api'\n})\n\nexport type ErrorRes = {\n  status: number\n  message: string | string[]\n  timestamp?: string\n  path?: string\n  [key: string]: unknown\n}\n\nrequest.interceptors.request.use((config) => {\n  const token = localStorage.getItem(TOKEN)\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`\n  }\n  return config\n})\n\nrequest.interceptors.response.use(\n  (response) => {\n    if (response.data.data) {\n      return response.data.data\n    }\n    return response.data\n  },\n  (error: AxiosError<ErrorRes>) => {\n    const res = error.response\n    if (res) {\n      if (res.status === 401) {\n        resetAuth()\n      } else {\n        const msg = res.data.message\n        if (Array.isArray(msg)) {\n          message.error(msg[0])\n        } else {\n          message.error(msg)\n        }\n        return Promise.reject(res.data)\n      }\n    }\n    return Promise.reject(error)\n  }\n)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/src/api/auth.ts"',title:'"apps/client/src/api/auth.ts"'},"import { request } from './request'\nimport { UserInfo } from './user'\n\nexport type LoginDto = {\n  loginName: string\n  password: string\n  code: string\n  uid: string\n}\n\nexport type LoginRes = {\n  token: string\n  user: UserInfo\n}\n\nexport function login(body: LoginDto): Promise<LoginRes> {\n  return request.post('/auth/login', body)\n}\n\nexport function logout() {\n  return request.get('/auth/logout')\n}\n\nexport type RegisterDto = {\n  username: string\n  email: string\n  password: string\n  code: string\n}\n\nexport function register(body: RegisterDto) {\n  return request.post('/auth/register', body)\n}\n\nexport async function sendCode(email: string) {\n  return request.post('/auth/sendCode', { email })\n}\n\nexport async function getCaptcha(uid: string): Promise<string> {\n  return request.get('auth/catpcha', {\n    params: { uid },\n    headers: { Accept: 'text/plain' }\n  })\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/src/api/user.ts"',title:'"apps/client/src/api/user.ts"'},"import { request } from './request'\n\nexport type UserInfo = {\n  id: number\n  username: string\n  email: string\n  nickname: string\n  avatar?: string\n  createAt: string\n  updateAt?: string\n}\n\nexport function getUserInfo(id: number): Promise<UserInfo> {\n  return request.get(`/user/${id}`)\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/src/api/index.ts"',title:'"apps/client/src/api/index.ts"'},"import * as authApi from './auth'\nimport * as userApi from './user'\n\nexport type * from './auth'\nexport type * from './user'\n\nexport { authApi, userApi }\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/vite.config.ts"',title:'"apps/client/vite.config.ts"'},"// ...\nexport default defineConfig({\n  // ...\n  server: {\n    proxy: {\n      '/api': {\n        target: 'http://localhost:3000'\n      }\n    }\n  }\n})\n")),(0,s.kt)("h3",{id:"\u4f7f\u7528-zustand-\u8fdb\u884c\u72b6\u6001\u7ba1\u7406"},"\u4f7f\u7528 zustand \u8fdb\u884c\u72b6\u6001\u7ba1\u7406"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"pnpm i zustand\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/src/stores/use-auth-store.ts"',title:'"apps/client/src/stores/use-auth-store.ts"'},"import { create } from 'zustand'\nimport { nanoid } from 'nanoid'\nimport { authApi } from '@/api'\nimport type { UserInfo, LoginDto } from '@/api'\nimport { message } from '@/providers/ant-fun-call-com-provider'\n\nexport const SESSION_UID = 'session-uid'\n\nexport const TOKEN = 'token'\n\nexport const USER_INFO = 'user-info'\n\nexport const useAuthStore = create(() => {\n  let sessionUid = sessionStorage.getItem(SESSION_UID) || ''\n  if (!sessionUid) {\n    sessionUid = nanoid()\n    sessionStorage.setItem(SESSION_UID, sessionUid)\n  }\n\n  const token = localStorage.getItem(TOKEN) || ''\n\n  const userInfoStr = localStorage.getItem(USER_INFO)\n  let userInfo: UserInfo | null = null\n  if (userInfoStr) {\n    userInfo = JSON.parse(userInfoStr)\n  }\n\n  return {\n    sessionUid,\n    token,\n    userInfo\n  }\n})\n\nexport const login = async (loginDto: LoginDto) => {\n  const data = await authApi.login(loginDto)\n  localStorage.setItem(TOKEN, data.token)\n  localStorage.setItem(USER_INFO, JSON.stringify(data.user))\n  useAuthStore.setState({ token: data.token, userInfo: data.user })\n}\n\nexport const logout = async () => {\n  try {\n    await authApi.logout()\n    resetAuth()\n    message.success('logout success!')\n  } catch {}\n}\n\nexport const resetAuth = () => {\n  localStorage.removeItem(TOKEN)\n  localStorage.removeItem(USER_INFO)\n  useAuthStore.setState({ token: '', userInfo: null })\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/src/stores/index.ts"',title:'"apps/client/src/stores/index.ts"'},"export * from './use-auth-store'\n")),(0,s.kt)("h3",{id:"\u5bf9\u63a5\u767b\u5f55\u6ce8\u518c"},"\u5bf9\u63a5\u767b\u5f55\u6ce8\u518c"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/src/pages/account/login.tsx"',title:'"apps/client/src/pages/account/login.tsx"'},'// ...\nimport { useEffect, useState } from \'react\'\nimport { authApi } from \'@/api\'\nimport { message } from \'@/providers/ant-fun-call-com-provider\'\nimport { useAuthStore, login } from \'@/stores\'\n\ntype LoginForm = {\n  loginName: string\n  password: string\n  code: string\n}\n\nexport const Login = () => {\n  const navigate = useNavigate()\n  const [form] = Form.useForm()\n\n  const [svgData, setSvgData] = useState(\'\')\n\n  const sessionUid = useAuthStore((state) => state.sessionUid)\n\n  useEffect(() => {\n    getCaptcha()\n  }, [])\n\n  const getCaptcha = async () => {\n    try {\n      const data = await authApi.getCaptcha(sessionUid)\n      setSvgData(data)\n    } catch {}\n  }\n\n  const onFinish = async (values: LoginForm) => {\n    try {\n      await login(Object.assign(values, { uid: sessionUid }))\n      navigate(\'/\')\n      message.success(\'login success!\')\n    } catch {}\n  }\n\n  return (\n    <Layout className="h-full flex justify-center items-center">\n      <Card className="w-[25rem]" title="Login">\n        <Form name="login" form={form} onFinish={onFinish} size="large">\n          <Form.Item\n            name="loginName" // ++\n            rules={[\n              {\n                required: true,\n                message: \'Please input your Username or Email!\'\n              }\n            ]}\n          >\n            <Input\n              prefix={<UserOutlined className="site-form-item-icon" />}\n              placeholder="Username or Email"\n            />\n          </Form.Item>\n          <Form.Item\n            name="password"\n            rules={[{ required: true, message: \'Please input your Password!\' }]}\n          >\n            <Input\n              prefix={<LockOutlined className="site-form-item-icon" />}\n              type="password"\n              placeholder="Password"\n              autoComplete="on" // ++\n            />\n          </Form.Item>\n          <Form.Item\n            name="code"\n            rules={[{ required: true, message: \'Please input your code!\' }]}\n          >\n            <Space.Compact style={{ width: \'100%\' }}>\n              <Input placeholder="Code" maxLength={6} />\n              <div\n                className="bg-white cursor-pointer w-[120px] h-[40px] rounded-r-md"\n                dangerouslySetInnerHTML={{ __html: svgData }}\n                onClick={getCaptcha}\n              ></div>\n            </Space.Compact>\n          </Form.Item>\n          // ...\n        </Form>\n      </Card>\n    </Layout>\n  )\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/src/pages/account/register.tsx"',title:'"apps/client/src/pages/account/register.tsx"'},'// ...\n\nexport const Register = () => {\n  const navigate = useNavigate()\n  const [form] = Form.useForm<RegisterForm>()\n  const [sendCodeLoading, setSendCodeLoading] = useState(false)\n  const [registerLoading, setRegisterLoading] = useState(false)\n\n  const sendCode = async () => {\n    const email = form.getFieldValue(\'email\')\n    if (!email) {\n      return message.warning(\'Please input your email first!\')\n    }\n    try {\n      setSendCodeLoading(true)\n      await authApi.sendCode(email)\n      message.success(\'send code success!\')\n    } catch {\n    } finally {\n      setSendCodeLoading(false)\n    }\n  }\n\n  const onFinish = async (values: RegisterForm) => {\n    try {\n      setRegisterLoading(true)\n      await authApi.register(Object.assign(values, { subPassword: undefined }))\n      message.success(\'register success!\')\n      navigate(\'/login\')\n    } catch {\n    } finally {\n      setRegisterLoading(false)\n    }\n  }\n\n  return (\n    <Layout className="h-full flex justify-center items-center">\n      <Card className="w-[25rem]" title="Register">\n        <Form name="register" form={form} onFinish={onFinish} size="large">\n          // ...\n          <Form.Item\n            name="code"\n            rules={[{ required: true, message: \'Please input your code!\' }]}\n          >\n            <Space.Compact style={{ width: \'100%\' }}>\n              <Input placeholder="Code" maxLength={6} />\n              <Button\n                type="primary"\n                loading={sendCodeLoading}\n                onClick={sendCode}\n              >\n                Send Code\n              </Button>\n            </Space.Compact>\n          </Form.Item>\n          <Form.Item>\n            <Space direction="vertical" className="w-full">\n              <Button\n                type="primary"\n                htmlType="submit"\n                className="w-full"\n                loading={registerLoading}\n              >\n                Register now\n              </Button>\n              <Button\n                className="w-full"\n                onClick={() => {\n                  navigate(\'/login\')\n                }}\n              >\n                Log in now\n              </Button>\n            </Space>\n          </Form.Item>\n        </Form>\n      </Card>\n    </Layout>\n  )\n}\n')),(0,s.kt)("h3",{id:"\u6dfb\u52a0\u8def\u7531\u5b88\u536b\u903b\u8f91"},"\u6dfb\u52a0\u8def\u7531\u5b88\u536b\u903b\u8f91"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/src/router/auth-route.tsx"',title:'"apps/client/src/router/auth-route.tsx"'},"import { Navigate } from 'react-router-dom'\nimport { useAuthStore } from '@/stores'\n\ntype AuthRoteProps = {\n  children: React.ReactElement\n}\n\nexport const AuthRoute = ({ children }: AuthRoteProps) => {\n  const token = useAuthStore((state) => state.token)\n\n  if (!token) {\n    return <Navigate to=\"/login\" />\n  }\n\n  return <>{children}</>\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/src/router/index.tsx"',title:'"apps/client/src/router/index.tsx"'},"// ...\nimport { AuthRoute } from './auth-route'\n\nexport const router = createBrowserRouter([\n  {\n    path: '/',\n    element: (\n      <AuthRoute>\n        <AppLayout />\n      </AuthRoute>\n    )\n    // ...\n  }\n  // ...\n])\n")),(0,s.kt)("h3",{id:"\u6dfb\u52a0\u9000\u51fa\u767b\u5f55\u529f\u80fd"},"\u6dfb\u52a0\u9000\u51fa\u767b\u5f55\u529f\u80fd"),(0,s.kt)("p",null,"\u670d\u52a1\u7aef\u4ee3\u7801"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/user/auth.controller.ts"',title:'"apps/server/src/modules/user/auth.controller.ts"'},"// ...\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  // ...\n  @ApiOperation({\n    summary: 'logout'\n  })\n  @Get('logout')\n  logout(@Headers('authorization') authorization: string) {\n    if (!authorization) {\n      throw new HttpException('unauthorized', HttpStatus.UNAUTHORIZED)\n    }\n    return this.authService.logout(authorization.split('Bearer ')[1])\n  }\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/user/auth.service.ts"',title:'"apps/server/src/modules/user/auth.service.ts"'},"// ...\n\n@Injectable()\nexport class AuthService {\n  // ...\n  async logout(token: string) {\n    await this.redisClient.del(token)\n  }\n}\n")),(0,s.kt)("p",null,"\u524d\u7aef"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/src/components/layout/index.tsx"',title:'"apps/client/src/components/layout/index.tsx"'},"// ...\nimport { useAuthStore, logout } from '@/stores'\n\n// ...\n\nconst items: MenuProps['items'] = [\n  // ...\n  {\n    label: 'log out',\n    key: '3',\n    icon: <LogoutOutlined />,\n    danger: true,\n    onClick: logout\n  }\n]\n\nexport const AppLayout = () => {\n  const [menuType, setMenuType] = useState(MenuType.friend)\n  const { styles } = useStyles()\n\n  const userInfo = useAuthStore((state) => state.userInfo)\n\n  return (\n    <Layout className=\"h-full flex flex-row\">\n      <div\n        className={cn(\n          'flex flex-col items-center w-[72px] py-4',\n          styles.navigationWrap\n        )}\n      >\n        // ...\n        <Dropdown\n          menu={{ items }}\n          trigger={['click']}\n          arrow\n          dropdownRender={(menu) => (\n            <div className={styles.dropdownWrap}>\n              <div style={{ padding: '0 10px', paddingTop: '6px' }}>\n                <Typography.Text>{userInfo?.nickname}</Typography.Text>\n              </div>\n              {menu}\n            </div>\n          )}\n        >\n          <Avatar\n            className=\"fc cursor-pointer w-[48px] h-[48px]\"\n            size=\"large\"\n            icon={<UserOutlined />}\n          >\n            user\n          </Avatar>\n        </Dropdown>\n      </div>\n      // ...\n    </Layout>\n  )\n}\n")),(0,s.kt)("h3",{id:"\u7ec4\u4ef6\u5916\u4f7f\u7528-antd-\u51fd\u6570\u7ec4\u4ef6"},"\u7ec4\u4ef6\u5916\u4f7f\u7528 antd \u51fd\u6570\u7ec4\u4ef6"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/src/providers/ant-fun-call-com-provider.ts"',title:'"apps/client/src/providers/ant-fun-call-com-provider.ts"'},"import { App } from 'antd'\nimport type { MessageInstance } from 'antd/es/message/interface'\nimport type { ModalStaticFunctions } from 'antd/es/modal/confirm'\nimport type { NotificationInstance } from 'antd/es/notification/interface'\n\nlet message: MessageInstance\nlet notification: NotificationInstance\nlet modal: Omit<ModalStaticFunctions, 'warn'>\n\nexport const AntFunCallComProvider = () => {\n  const staticFunction = App.useApp()\n  message = staticFunction.message\n  modal = staticFunction.modal\n  notification = staticFunction.notification\n  return null\n}\n\nexport { message, notification, modal }\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/src/App.tsx"',title:'"apps/client/src/App.tsx"'},"// ...\nimport { AntFunCallComProvider } from '@/providers/ant-fun-call-com-provider'\n\nfunction App() {\n  // ...\n  ;<HappyProvider>\n    <AntApp className=\"h-full\">\n      <AntFunCallComProvider /> // ++\n      <RouterProvider router={router}></RouterProvider>\n    </AntApp>\n  </HappyProvider>\n  // ...\n}\n\nexport default App\n")))}m.isMDXComponent=!0}}]);