"use strict";(self.webpackChunkying_blog=self.webpackChunkying_blog||[]).push([[6623],{9613:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var r=t(9496);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),m=p(t),u=s,g=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return t?r.createElement(g,o(o({ref:n},c),{},{components:t})):r.createElement(g,o({ref:n},c))}));function g(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=t.length,o=new Array(i);o[0]=u;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[m]="string"==typeof e?e:s,o[1]=a;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9922:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var r=t(8957),s=(t(9496),t(9613));const i={id:"register-api",sidebar_label:"\u6ce8\u518c\u63a5\u53e3",title:"\u6ce8\u518c\u63a5\u53e3"},o=void 0,a={unversionedId:"ying-chat/register-api",id:"ying-chat/register-api",title:"\u6ce8\u518c\u63a5\u53e3",description:"\u9a8c\u8bc1 email \u7684\u771f\u5b9e\u6027\u901a\u8fc7 nodemailer \u53d1\u9a8c\u8bc1\u7801\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u4e2a\u53d1\u9001\u9a8c\u8bc1\u7801\u7684\u63a5\u53e3\u3002",source:"@site/docs/ying-chat/08-register-api.md",sourceDirName:"ying-chat",slug:"/ying-chat/register-api",permalink:"/docs/ying-chat/register-api",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{id:"register-api",sidebar_label:"\u6ce8\u518c\u63a5\u53e3",title:"\u6ce8\u518c\u63a5\u53e3"},sidebar:"yingChat",previous:{title:"\u63a5\u53e3\u521d\u59cb\u5316",permalink:"/docs/ying-chat/api-init"},next:{title:"validation \u9a8c\u8bc1 \u548c api \u6587\u6863",permalink:"/docs/ying-chat/validation-and-api-doc"}},l={},p=[{value:"\u5f15\u5165 redis",id:"\u5f15\u5165-redis",level:3},{value:"\u914d\u7f6e qq \u90ae\u7bb1",id:"\u914d\u7f6e-qq-\u90ae\u7bb1",level:3},{value:"\u53d1\u9001\u9a8c\u8bc1\u7801\u63a5\u53e3",id:"\u53d1\u9001\u9a8c\u8bc1\u7801\u63a5\u53e3",level:3},{value:"\u6ce8\u518c\u63a5\u53e3",id:"\u6ce8\u518c\u63a5\u53e3",level:3}],c={toc:p},m="wrapper";function d(e){let{components:n,...i}=e;return(0,s.kt)(m,(0,r.Z)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"\u9a8c\u8bc1 email \u7684\u771f\u5b9e\u6027\u901a\u8fc7 nodemailer \u53d1\u9a8c\u8bc1\u7801\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u4e2a\u53d1\u9001\u9a8c\u8bc1\u7801\u7684\u63a5\u53e3\u3002"),(0,s.kt)("h3",{id:"\u5f15\u5165-redis"},"\u5f15\u5165 redis"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"pnpm i redis\n")),(0,s.kt)("p",null,"docker \u542f\u52a8 redis"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="apps/server/.env"',title:'"apps/server/.env"'},"// ...\n# redis\nREDIS_HOST=localhost\nREDIS_PORT=6379\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/config/redis.config.ts"',title:'"apps/server/src/config/redis.config.ts"'},"import { registerAs } from '@nestjs/config'\n\nexport const redisConfig = registerAs('redisConfig', () => {\n  if (!process.env.REDIS_HOST) {\n    throw new Error('REDIS_HOST is not exist')\n  }\n  if (!process.env.REDIS_PORT) {\n    throw new Error('REDIS_PORT is not exist')\n  }\n  return {\n    host: process.env.REDIS_HOST,\n    port: +process.env.REDIS_PORT\n  }\n})\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/config/index.ts"',title:'"apps/server/src/config/index.ts"'},"// ...\nexport * from './redis.config'\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/app.module.ts"',title:'"apps/server/src/app.module.ts"'},"import { Module } from '@nestjs/common'\nimport { ConfigModule } from '@nestjs/config'\nimport { apiConfig, dbConfig, redisConfig } from '@/config'\nimport { DbModule } from '@/modules/db/db.module'\nimport { UserModule } from '@/modules/user/user.module'\nimport { RedisModule } from '@/modules/redis/redis.module'\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [apiConfig, dbConfig, redisConfig]\n    })\n    // ...\n  ]\n})\nexport class AppModule {}\n")),(0,s.kt)("p",null,"\u521b\u5efa redis \u6a21\u5757"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/redis/contants.ts"',title:'"apps/server/src/modules/redis/contants.ts"'},"export const RedisToken = 'REDIS_CLIENT'\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/redis/redis.module.ts"',title:'"apps/server/src/modules/redis/redis.module.ts"'},"import { Global, Module } from '@nestjs/common'\nimport { ConfigType } from '@nestjs/config'\nimport { createClient } from 'redis'\nimport { redisConfig } from '@/config/redis.config'\nimport { RedisToken } from './contants'\n\n@Global()\n@Module({\n  providers: [\n    {\n      provide: RedisToken,\n      async useFactory(redisConf: ConfigType<typeof redisConfig>) {\n        const client = createClient({\n          socket: {\n            host: redisConf.host,\n            port: redisConf.port\n          }\n        })\n        await client.connect()\n        return client\n      },\n      inject: [redisConfig.KEY]\n    }\n  ],\n  exports: [RedisToken]\n})\nexport class RedisModule {}\n")),(0,s.kt)("p",null,"\u6700\u540e\u5728 ",(0,s.kt)("inlineCode",{parentName:"p"},"apps/server/src/app.module.ts")," \u4e2d\u5f15\u5165 redis \u6a21\u5757"),(0,s.kt)("p",null,"\u63a5\u4e0b\u6765\u4fee\u6539 AuthController \u548c AuthService"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/user/auth.controller.ts"',title:'"apps/server/src/modules/user/auth.controller.ts"'},"import { Controller, Post } from '@nestjs/common'\nimport { AuthService } from './auth.service'\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('login')\n  login() {\n    return this.authService.login()\n  }\n\n  @Post('register')\n  register() {\n    return this.authService.register()\n  }\n\n  @Post('sendCode')\n  sendCode() {\n    return this.authService.sendCode()\n  }\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/user/auth.service.ts"',title:'"apps/server/src/modules/user/auth.service.ts"'},"import { Injectable, Inject } from '@nestjs/common'\nimport { Repository } from 'typeorm'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { RedisClientType } from 'redis'\nimport { User } from './entities/user.entity'\nimport { RedisToken } from '@/modules/redis/contants'\n\n@Injectable()\nexport class AuthService {\n  @InjectRepository(User)\n  private readonly userRepository: Repository<User>\n\n  @Inject(RedisToken)\n  private redisClient: RedisClientType\n\n  login() {}\n\n  register() {}\n\n  sendCode() {}\n}\n")),(0,s.kt)("h3",{id:"\u914d\u7f6e-qq-\u90ae\u7bb1"},"\u914d\u7f6e qq \u90ae\u7bb1"),(0,s.kt)("p",null,(0,s.kt)("img",{src:t(7909).Z,width:"389",height:"293"})),(0,s.kt)("p",null,(0,s.kt)("img",{src:t(9556).Z,width:"1232",height:"391"})),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="apps/server/.env"',title:'"apps/server/.env"'},"# email\nEMAIl_HOST=smtp.qq.com\nEMAIL_PORT=465\nEMAIL_USER=jackdeng155@qq.com\nEMAIL_AUTH_CODE=somjvruefdgbided\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/config/email.config.ts"',title:'"apps/server/src/config/email.config.ts"'},"import { registerAs } from '@nestjs/config'\n\nexport const emailConfig = registerAs('emailConfig', () => {\n  if (!process.env.EMAIl_HOST) {\n    throw new Error('EMAIl_HOST is not exist')\n  }\n  if (!process.env.EMAIL_PORT) {\n    throw new Error('EMAIL_PORT is not exist')\n  }\n  if (!process.env.EMAIL_USER) {\n    throw new Error('EMAIL_USER is not exist')\n  }\n  if (!process.env.EMAIL_AUTH_CODE) {\n    throw new Error('EMAIL_AUTH_CODE is not exist')\n  }\n  return {\n    host: process.env.EMAIl_HOST,\n    port: +process.env.EMAIL_PORT,\n    user: process.env.EMAIL_USER,\n    code: process.env.EMAIL_AUTH_CODE\n  }\n})\n")),(0,s.kt)("p",null,"\u7136\u540e\u540c\u6837\u5728 ",(0,s.kt)("inlineCode",{parentName:"p"},"app.module.ts")," \u5bfc\u5165\uff0c\u5728 ",(0,s.kt)("inlineCode",{parentName:"p"},"config/index.ts")," \u5bfc\u51fa"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"pnpm i nodemailer\npnpm i @types/nodemailer -D\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/email/email.module.ts"',title:'"apps/server/src/modules/email/email.module.ts"'},"import { Global, Module } from '@nestjs/common'\nimport { EmailService } from './email.service'\n\n@Global()\n@Module({\n  providers: [EmailService],\n  exports: [EmailService]\n})\nexport class EmailModule {}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/email/email.service.ts"',title:'"apps/server/src/modules/email/email.service.ts"'},"import { emailConfig } from '@/config'\nimport { Inject, Injectable } from '@nestjs/common'\nimport { ConfigType } from '@nestjs/config'\nimport { createTransport, Transporter } from 'nodemailer'\n\n@Injectable()\nexport class EmailService {\n  transporter: Transporter\n\n  constructor(\n    @Inject(emailConfig.KEY)\n    private readonly emConfig: ConfigType<typeof emailConfig>\n  ) {\n    this.transporter = createTransport({\n      host: this.emConfig.host,\n      port: this.emConfig.port,\n      auth: {\n        user: this.emConfig.user,\n        pass: this.emConfig.code\n      }\n    })\n  }\n\n  async sendMail(email: string, subject: string, html: string) {\n    await this.transporter.sendMail({\n      from: this.emConfig.user,\n      to: email,\n      subject,\n      html\n    })\n  }\n}\n")),(0,s.kt)("p",null,"\u7136\u540e\u5728 ",(0,s.kt)("inlineCode",{parentName:"p"},"app.module.ts")," \u5f15\u5165 EmailModule \u5373\u53ef"),(0,s.kt)("h3",{id:"\u53d1\u9001\u9a8c\u8bc1\u7801\u63a5\u53e3"},"\u53d1\u9001\u9a8c\u8bc1\u7801\u63a5\u53e3"),(0,s.kt)("p",null,"\u6839\u76ee\u5f55\u5b89\u88c5 ",(0,s.kt)("inlineCode",{parentName:"p"},"nanoid")," \u56e0\u4e3a\u540e\u9762\u524d\u7aef\u9879\u76ee\u4e5f\u4f1a\u7528\u5230\uff0c\u5b89\u88c5\u7248\u672c 3\uff0c \u56e0\u4e3a\u65b0\u7248\u4e0d\u518d\u652f\u6301 commonjs\uff0c nestjs \u4f7f\u7528\u4f1a\u62a5\u9519\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"pnpm i nanoid@3 -w\n")),(0,s.kt)("p",null,"\u53d1\u9001\u9a8c\u8bc1\u7801\u7684\u63a5\u53e3\uff0c\u68c0\u67e5 email \u662f\u5426\u5df2\u7ecf\u6ce8\u518c\uff0c\u901a\u8fc7 redis \u5b58\u5bf9\u5e94\u90ae\u7bb1\u7684\u9a8c\u8bc1\u7801\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/user/auth.service.ts"',title:'"apps/server/src/modules/user/auth.service.ts"'},"// ...\n\n@Injectable()\nexport class AuthService {\n  @InjectRepository(User)\n  private readonly userRepository: Repository<User>\n\n  @Inject(RedisToken)\n  private redisClient: RedisClientType\n\n  @Inject(EmailService)\n  private emailService: EmailService\n\n  // ...\n\n  async sendCode(email: string) {\n    const expireTime = await this.redisClient.expireTime(\n      RedisKey.RegisterCode + email\n    )\n    if (expireTime > 0) {\n      const dv = expireTime - Math.floor(Date.now() / 1000)\n      if (dv > 2 * 60) {\n        throw new HttpException(\n          'please try again in 1 minutes',\n          HttpStatus.NOT_ACCEPTABLE\n        )\n      }\n    }\n\n    const user = await this.userRepository.findOne({ where: { email } })\n    if (user) {\n      return new HttpException(\n        'user email already exists',\n        HttpStatus.BAD_REQUEST\n      )\n    }\n    const nanoid = customAlphabet('1234567890', 6)\n    const code = nanoid()\n    await this.emailService.sendMail(\n      email,\n      '\u9a8c\u8bc1\u7801',\n      `\n        <p>\u60a8\u7684\u9a8c\u8bc1\u7801\u4e3a\uff1a</p>\n        <div style=\"width: 100px;height: 35px;\">${code}</div>\n        <p style=\"color:#999;\">5\u5206\u949f\u5185\u6709\u6548</p>\n      `\n    )\n    await this.redisClient.set(RedisKey.RegisterCode + email, code, {\n      EX: 5 * 60\n    })\n  }\n}\n")),(0,s.kt)("h3",{id:"\u6ce8\u518c\u63a5\u53e3"},"\u6ce8\u518c\u63a5\u53e3"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"username")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"email")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"password\uff08\u52a0\u5bc6\u5b58\u5165\uff09")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"code")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"email \u662f\u5426\u552f\u4e00")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"email \u7684\u771f\u5b9e\u6027\uff08\u901a\u8fc7 code \u9a8c\u8bc1\uff09")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"username \u662f\u5426\u552f\u4e00")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"code redis \u91cc\u5bf9\u5e94\u90ae\u7bb1\u662f\u5426\u6709 code"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/user/dto/auth.dto.ts"',title:'"apps/server/src/modules/user/dto/auth.dto.ts"'},"export class SendCodeDto {\n  email: string\n}\n\nexport class RegisterDto {\n  username: string\n  email: string\n  password: string\n  code: string\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/user/auth.controller.ts"',title:'"apps/server/src/modules/user/auth.controller.ts"'},"import { Body, Controller, Post } from '@nestjs/common'\nimport { AuthService } from './auth.service'\nimport { RegisterDto, SendCodeDto } from './dto/auth.dto'\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('login')\n  login() {\n    return this.authService.login()\n  }\n\n  @Post('register')\n  register(@Body() registerDto: RegisterDto) {\n    return this.authService.register(registerDto)\n  }\n\n  @Post('sendCode')\n  sendCode(@Body() sendCodeDto: SendCodeDto) {\n    return this.authService.sendCode(sendCodeDto.email)\n  }\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/user/auth.service.ts"',title:'"apps/server/src/modules/user/auth.service.ts"'},"// ...\n\n@Injectable()\nexport class AuthService {\n  // ...\n\n  async register(registerDto: RegisterDto) {\n    const registerCode = await this.redisClient.get(\n      RedisKey.RegisterCode + registerDto.email\n    )\n    if (!registerCode || registerCode !== registerDto.code) {\n      throw new HttpException(\n        'email verification code is incorrect',\n        HttpStatus.NOT_ACCEPTABLE\n      )\n    }\n\n    const user = await this.userRepository.findOne({\n      where: { username: registerDto.username }\n    })\n    if (user) {\n      throw new HttpException(\n        'username already exists',\n        HttpStatus.NOT_ACCEPTABLE\n      )\n    }\n\n    const newUser = this.userRepository.create({\n      username: registerDto.username,\n      email: registerDto.email,\n      nickname: 'ying#' + nanoid(8),\n      password: generatePass(registerDto.password)\n    })\n\n    await this.userRepository.save(newUser)\n    await this.redisClient.del(RedisKey.RegisterCode + registerDto.email)\n  }\n\n  // ...\n}\n")))}d.isMDXComponent=!0},7909:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/01-90bb76305b9c5e79a0a587d3adab4dc2.png"},9556:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/02-830be718789c4c30a2eae5f191a12279.png"}}]);