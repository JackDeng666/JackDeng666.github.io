"use strict";(self.webpackChunkying_blog=self.webpackChunkying_blog||[]).push([[3362],{9613:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var r=t(9496);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),m=p(t),u=s,g=m["".concat(l,".").concat(u)]||m[u]||c[u]||i;return t?r.createElement(g,o(o({ref:n},d),{},{components:t})):r.createElement(g,o({ref:n},d))}));function g(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=t.length,o=new Array(i);o[0]=u;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[m]="string"==typeof e?e:s,o[1]=a;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4218:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var r=t(8957),s=(t(9496),t(9613));const i={id:"register-api",sidebar_label:"\u5b9e\u73b0\u6ce8\u518c\u63a5\u53e3",title:"\u5b9e\u73b0\u6ce8\u518c\u63a5\u53e3"},o=void 0,a={unversionedId:"ying-chat/register-api",id:"ying-chat/register-api",title:"\u5b9e\u73b0\u6ce8\u518c\u63a5\u53e3",description:"\u672c\u8282\u6765\u5b9e\u73b0\u6ce8\u518c\u63a5\u53e3\u3002",source:"@site/docs/ying-chat/07-register-api.md",sourceDirName:"ying-chat",slug:"/ying-chat/register-api",permalink:"/docs/ying-chat/register-api",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"register-api",sidebar_label:"\u5b9e\u73b0\u6ce8\u518c\u63a5\u53e3",title:"\u5b9e\u73b0\u6ce8\u518c\u63a5\u53e3"},sidebar:"yingChat",previous:{title:"\u63a5\u53e3\u521d\u59cb\u5316",permalink:"/docs/ying-chat/api-init"},next:{title:"\u524d\u540e\u7aef\u5171\u7528 DTO \u6821\u9a8c",permalink:"/docs/ying-chat/dto-validation-and-openapi-doc"}},l={},p=[{value:"\u5f15\u5165 MySQL",id:"\u5f15\u5165-mysql",level:2},{value:"MySQL \u914d\u7f6e",id:"mysql-\u914d\u7f6e",level:3},{value:"DbModule \u6a21\u5757",id:"dbmodule-\u6a21\u5757",level:3},{value:"\u5f15\u5165 Redis",id:"\u5f15\u5165-redis",level:2},{value:"Redis \u914d\u7f6e",id:"redis-\u914d\u7f6e",level:3},{value:"RedisModule \u6a21\u5757",id:"redismodule-\u6a21\u5757",level:3},{value:"\u5f15\u5165 nodemailer",id:"\u5f15\u5165-nodemailer",level:2},{value:"nodemailer \u914d\u7f6e",id:"nodemailer-\u914d\u7f6e",level:3},{value:"EmailModule \u6a21\u5757",id:"emailmodule-\u6a21\u5757",level:3},{value:"\u53d1\u9001\u9a8c\u8bc1\u7801\u63a5\u53e3",id:"\u53d1\u9001\u9a8c\u8bc1\u7801\u63a5\u53e3",level:2},{value:"\u6ce8\u518c\u63a5\u53e3",id:"\u6ce8\u518c\u63a5\u53e3",level:2}],d={toc:p},m="wrapper";function c(e){let{components:n,...i}=e;return(0,s.kt)(m,(0,r.Z)({},d,i,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"\u672c\u8282\u6765\u5b9e\u73b0\u6ce8\u518c\u63a5\u53e3\u3002"),(0,s.kt)("p",null,"\u672c\u9879\u76ee\u4f7f\u7528\u90ae\u7bb1\u53bb\u6ce8\u518c\u8d26\u53f7\uff0c\u6574\u4e2a\u6ce8\u518c\u6d41\u7a0b\u662f\u5148\u53d1\u9001\u9a8c\u8bc1\u7801\u5230\u7528\u6237\u7684\u90ae\u7bb1\uff0c\u6b64\u65f6\u670d\u52a1\u7aef\u628a\u7528\u6237\u90ae\u7bb1\u548c\u5bf9\u5e94\u7684\u9a8c\u8bc1\u7801\u5b58\u5230 redis\uff0c\u7136\u540e\u5728\u6ce8\u518c\u65f6\u5148\u901a\u8fc7 redis \u9a8c\u8bc1\u5bf9\u5e94\u4f20\u8fc7\u6765\u7684\u90ae\u7bb1\u548c\u9a8c\u8bc1\u7801\u662f\u5426\u5339\u914d\uff0c\u5982\u679c\u5339\u914d\u5219\u63d2\u5165\u4e00\u4e2a\u65b0\u7528\u6237\u5230\u6570\u636e\u5e93\u3002"),(0,s.kt)("p",null,"\u90a3\u4e48\u5728\u5b9e\u73b0\u6ce8\u518c\u63a5\u53e3\u4e4b\u524d\uff0c\u5148\u628a MySQL \u548c Redis \u5f15\u5165\u4e00\u4e0b\u3002"),(0,s.kt)("h2",{id:"\u5f15\u5165-mysql"},"\u5f15\u5165 MySQL"),(0,s.kt)("p",null,"\u6211\u7684\u5f00\u53d1\u73af\u5883\u4e0b\u662f\u4f7f\u7528 docker \u542f\u52a8 MySQL\uff0c\u5982\u679c\u6709\u5176\u4ed6\u73af\u5883\u5ffd\u7565\u4e0b\u9762\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"docker run --name mysql-test \\\n  -p 3306:3306 \\\n  -v D:/docker-backup/mysql-data:/var/lib/mysql \\\n  -e MYSQL_ROOT_PASSWORD=ying123456 \\\n  -e TZ=Asia/Shanghai \\\n  -d mysql\n")),(0,s.kt)("p",null,"\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5e93 ying_chat\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"CREATE DATABASE IF NOT EXISTS ying_chat CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\n")),(0,s.kt)("p",null,"\u5728 ",(0,s.kt)("inlineCode",{parentName:"p"},"server")," \u4e0b\u8f7d\u9700\u8981\u7684\u76f8\u5173\u4f9d\u8d56\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="apps/server"',title:'"apps/server"'},"pnpm i @nestjs/typeorm typeorm mysql2\n")),(0,s.kt)("h3",{id:"mysql-\u914d\u7f6e"},"MySQL \u914d\u7f6e"),(0,s.kt)("p",null,"\u628a MySQL \u7684\u76f8\u5173\u914d\u7f6e\u5199\u5165\u914d\u7f6e\u6587\u4ef6\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="apps/server/.env"',title:'"apps/server/.env"'},"// ...\n# mysql\nDB_HOST=localhost\nDB_PORT=3306\nDB_USER=root\nDB_PASSWORD=ying123456\nDB_NAME=ying_chat\n")),(0,s.kt)("p",null,"\u518d\u6dfb\u52a0\u4e00\u4e2a ",(0,s.kt)("inlineCode",{parentName:"p"},"db.config.ts")," \u6587\u4ef6\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="apps/server/src/config/db.config.ts"',title:'"apps/server/src/config/db.config.ts"'},"import { registerAs } from '@nestjs/config'\n\nexport const dbConfig = registerAs('dbConfig', () => {\n  if (!process.env.DB_HOST) {\n    throw new Error('DB_HOST is not exist')\n  }\n  if (!process.env.DB_PORT) {\n    throw new Error('DB_PORT is not exist')\n  }\n  if (!process.env.DB_USER) {\n    throw new Error('DB_USER is not exist')\n  }\n  if (!process.env.DB_PASSWORD) {\n    throw new Error('DB_PASSWORD is not exist')\n  }\n  if (!process.env.DB_NAME) {\n    throw new Error('DB_NAME is not exist')\n  }\n  return {\n    host: process.env.DB_HOST,\n    port: +process.env.DB_PORT,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME\n  }\n})\n")),(0,s.kt)("p",null,"\u5728 ",(0,s.kt)("inlineCode",{parentName:"p"},"config")," \u91cc\u5bfc\u51fa\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/config/index.ts"',title:'"apps/server/src/config/index.ts"'},"export * from './api.config'\nexport * from './db.config'\n")),(0,s.kt)("h3",{id:"dbmodule-\u6a21\u5757"},"DbModule \u6a21\u5757"),(0,s.kt)("p",null,"\u521b\u5efa\u4e00\u4e2a ",(0,s.kt)("inlineCode",{parentName:"p"},"DbModule")," \u6a21\u5757\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/db/db.module.ts"',title:'"apps/server/src/modules/db/db.module.ts"'},"import { Global, Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { ConfigType } from '@nestjs/config'\nimport { dbConfig } from '@/config'\n\n@Global()\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      useFactory: (dbConf: ConfigType<typeof dbConfig>) => {\n        return {\n          charset: 'utf8mb4',\n          type: 'mysql',\n          host: dbConf.host,\n          port: dbConf.port,\n          username: dbConf.username,\n          password: dbConf.password,\n          database: dbConf.database,\n          synchronize: true,\n          autoLoadEntities: true,\n          logging: true\n        }\n      },\n      inject: [dbConfig.KEY]\n    })\n  ]\n})\nexport class DbModule {}\n")),(0,s.kt)("p",null,"\u7136\u540e\u5728",(0,s.kt)("inlineCode",{parentName:"p"},"AppModule"),"\u91cc\u5f15\u5165",(0,s.kt)("inlineCode",{parentName:"p"},"DbModule"),"\u548c",(0,s.kt)("inlineCode",{parentName:"p"},"dbConfig"),"\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/app.module.ts"',title:'"apps/server/src/app.module.ts"'},"// ...\nimport { apiConfig, dbConfig } from '@/config'\nimport { DbModule } from '@/modules/db/db.module'\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [apiConfig, dbConfig]\n    }),\n    DbModule\n    // ...\n  ]\n})\nexport class AppModule {}\n")),(0,s.kt)("h2",{id:"\u5f15\u5165-redis"},"\u5f15\u5165 Redis"),(0,s.kt)("p",null,"\u6211\u7684\u5f00\u53d1\u73af\u5883\u4e0b\u662f\u4f7f\u7528 docker \u542f\u52a8 Redis\uff0c\u5982\u679c\u6709\u5176\u4ed6\u73af\u5883\u5ffd\u7565\u4e0b\u9762\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"docker run --name redis-test \\\n  -p 6379:6379 \\\n  -v D:/DockerData/ContainerBackup/redis-data:/data \\\n  -d redis\n")),(0,s.kt)("p",null,"\u5728 ",(0,s.kt)("inlineCode",{parentName:"p"},"server")," \u4e0b\u8f7d\u9700\u8981\u7684\u76f8\u5173\u4f9d\u8d56\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="apps/server"',title:'"apps/server"'},"pnpm i redis\n")),(0,s.kt)("h3",{id:"redis-\u914d\u7f6e"},"Redis \u914d\u7f6e"),(0,s.kt)("p",null,"\u628a Redis \u7684\u76f8\u5173\u914d\u7f6e\u5199\u5165\u914d\u7f6e\u6587\u4ef6\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="apps/server/.env"',title:'"apps/server/.env"'},"// ...\n# redis\nREDIS_HOST=localhost\nREDIS_PORT=6379\n")),(0,s.kt)("p",null,"\u65b0\u5efa ",(0,s.kt)("inlineCode",{parentName:"p"},"redis.config.ts")," \u6587\u4ef6\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/config/redis.config.ts"',title:'"apps/server/src/config/redis.config.ts"'},"import { registerAs } from '@nestjs/config'\n\nexport const redisConfig = registerAs('redisConfig', () => {\n  if (!process.env.REDIS_HOST) {\n    throw new Error('REDIS_HOST is not exist')\n  }\n  if (!process.env.REDIS_PORT) {\n    throw new Error('REDIS_PORT is not exist')\n  }\n  return {\n    host: process.env.REDIS_HOST,\n    port: +process.env.REDIS_PORT\n  }\n})\n")),(0,s.kt)("p",null,"\u5bfc\u51fa ",(0,s.kt)("inlineCode",{parentName:"p"},"redis.config.ts"),"\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/config/index.ts"',title:'"apps/server/src/config/index.ts"'},"// ...\nexport * from './redis.config'\n")),(0,s.kt)("h3",{id:"redismodule-\u6a21\u5757"},"RedisModule \u6a21\u5757"),(0,s.kt)("p",null,"\u5728 ",(0,s.kt)("inlineCode",{parentName:"p"},"modules")," \u65b0\u5efa\u4e00\u4e2a ",(0,s.kt)("inlineCode",{parentName:"p"},"redis")," \u6587\u4ef6\u5939\uff0c\u7136\u540e\u5199\u5165\u4e00\u4e2a ",(0,s.kt)("inlineCode",{parentName:"p"},"constant.ts")," \u6587\u4ef6"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/redis/constant.ts"',title:'"apps/server/src/modules/redis/constant.ts"'},"export const RedisToken = 'REDIS_CLIENT'\n")),(0,s.kt)("p",null,"\u65b0\u5efa\u4e00\u4e2a ",(0,s.kt)("inlineCode",{parentName:"p"},"RedisModule")," \uff0c\u8fd9\u4e2a\u6a21\u5757\u66b4\u9732\u4e00\u4e2a\u63d0\u4f9b\u8005\uff0c\u5b83\u7684\u503c\u4e3a ",(0,s.kt)("inlineCode",{parentName:"p"},"createClient")," \u521b\u5efa\u7684 redis client \u5bf9\u8c61\uff0c\u4ee5\u540e\u5728\u522b\u7684\u6a21\u5757\u91cc\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u5b9a\u4e49\u7684 ",(0,s.kt)("inlineCode",{parentName:"p"},"RedisToken")," \u53bb\u76f4\u63a5\u6ce8\u5165\u8fd9\u4e2a redis client \u5bf9\u8c61\uff0c\u5e76\u7528\u8fd9\u4e2a\u5bf9\u8c61\u5bf9 redis \u8fdb\u884c\u5404\u79cd\u64cd\u4f5c\u4e86\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/redis/redis.module.ts"',title:'"apps/server/src/modules/redis/redis.module.ts"'},"import { Global, Module } from '@nestjs/common'\nimport { ConfigType } from '@nestjs/config'\nimport { createClient } from 'redis'\nimport { redisConfig } from '@/config/redis.config'\nimport { RedisToken } from './constant'\n\n@Global()\n@Module({\n  providers: [\n    {\n      provide: RedisToken,\n      async useFactory(redisConf: ConfigType<typeof redisConfig>) {\n        const client = createClient({\n          socket: {\n            host: redisConf.host,\n            port: redisConf.port\n          }\n        })\n        await client.connect()\n        return client\n      },\n      inject: [redisConfig.KEY]\n    }\n  ],\n  exports: [RedisToken]\n})\nexport class RedisModule {}\n")),(0,s.kt)("p",null,"\u6700\u540e\u5728 ",(0,s.kt)("inlineCode",{parentName:"p"},"AppModule")," \u4e2d\u5f15\u5165 ",(0,s.kt)("inlineCode",{parentName:"p"},"RedisModule"),"\u548c",(0,s.kt)("inlineCode",{parentName:"p"},"redisConfig"),"\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/app.module.ts"',title:'"apps/server/src/app.module.ts"'},"// ...\nimport { apiConfig, dbConfig, redisConfig } from '@/config'\nimport { RedisModule } from '@/modules/redis/redis.module'\n// ...\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [apiConfig, dbConfig, redisConfig]\n    }),\n    // ...\n    RedisModule\n    // ...\n  ]\n})\nexport class AppModule {}\n")),(0,s.kt)("h2",{id:"\u5f15\u5165-nodemailer"},"\u5f15\u5165 nodemailer"),(0,s.kt)("p",null,"\u5728\u6211\u4eec\u7684\u6d41\u7a0b\u5f53\u4e2d\uff0c\u9700\u8981\u53d1\u9001\u9a8c\u8bc1\u7801\u5230\u90ae\u7bb1\uff0c\u90a3\u8fd8\u9700\u8981\u4e00\u4e2a\u90ae\u7bb1\u53d1\u9001\u8005\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 ",(0,s.kt)("inlineCode",{parentName:"p"},"nodemailer")," \u8fd9\u4e2a\u5e93\u548c qq \u90ae\u7bb1\u8fdb\u884c\u53d1\u9001\u3002"),(0,s.kt)("h3",{id:"nodemailer-\u914d\u7f6e"},"nodemailer \u914d\u7f6e"),(0,s.kt)("p",null,"\u8fdb\u5165 qq \u90ae\u7bb1\u540e\uff0c\u6309\u7167\u4ee5\u4e0b\u63d0\u793a\u53bb\u5f00\u542f\u81ea\u5df1\u90ae\u7bb1\u7684\u670d\u52a1\uff0c\u62ff\u5230\u5bf9\u5e94\u7684\u6388\u6743\u7801\u3002"),(0,s.kt)("p",null,(0,s.kt)("img",{src:t(1863).Z,width:"389",height:"293"})),(0,s.kt)("p",null,(0,s.kt)("img",{src:t(7957).Z,width:"1232",height:"391"})),(0,s.kt)("p",null,"\u628a\u90ae\u7bb1\u7684\u914d\u7f6e\u586b\u5165\u914d\u7f6e\u6587\u4ef6\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="apps/server/.env"',title:'"apps/server/.env"'},"# email\nEMAIl_HOST=smtp.qq.com\nEMAIL_PORT=465\nEMAIL_USER=jackdeng155@qq.com\nEMAIL_AUTH_CODE=somjvruefdgbided\n")),(0,s.kt)("p",null,"\u65b0\u5efa\u4e00\u4e2a ",(0,s.kt)("inlineCode",{parentName:"p"},"email.config.ts")," \u6587\u4ef6\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/config/email.config.ts"',title:'"apps/server/src/config/email.config.ts"'},"import { registerAs } from '@nestjs/config'\n\nexport const emailConfig = registerAs('emailConfig', () => {\n  if (!process.env.EMAIl_HOST) {\n    throw new Error('EMAIl_HOST is not exist')\n  }\n  if (!process.env.EMAIL_PORT) {\n    throw new Error('EMAIL_PORT is not exist')\n  }\n  if (!process.env.EMAIL_USER) {\n    throw new Error('EMAIL_USER is not exist')\n  }\n  if (!process.env.EMAIL_AUTH_CODE) {\n    throw new Error('EMAIL_AUTH_CODE is not exist')\n  }\n  return {\n    host: process.env.EMAIl_HOST,\n    port: +process.env.EMAIL_PORT,\n    user: process.env.EMAIL_USER,\n    code: process.env.EMAIL_AUTH_CODE\n  }\n})\n")),(0,s.kt)("p",null,"\u5bfc\u51fa ",(0,s.kt)("inlineCode",{parentName:"p"},"email.config.ts"),"\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/config/index.ts"',title:'"apps/server/src/config/index.ts"'},"// ...\nexport * from './email.config'\n")),(0,s.kt)("h3",{id:"emailmodule-\u6a21\u5757"},"EmailModule \u6a21\u5757"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"pnpm i nodemailer\npnpm i @types/nodemailer -D\n")),(0,s.kt)("p",null,"\u65b0\u5efa\u4e00\u4e2a ",(0,s.kt)("inlineCode",{parentName:"p"},"EmailService")," \u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/email/email.service.ts"',title:'"apps/server/src/modules/email/email.service.ts"'},"import { Inject, Injectable } from '@nestjs/common'\nimport { ConfigType } from '@nestjs/config'\nimport { createTransport, Transporter } from 'nodemailer'\nimport { emailConfig } from '@/config'\n\n@Injectable()\nexport class EmailService {\n  transporter: Transporter\n\n  constructor(\n    @Inject(emailConfig.KEY)\n    private readonly emConfig: ConfigType<typeof emailConfig>\n  ) {\n    this.transporter = createTransport({\n      host: this.emConfig.host,\n      port: this.emConfig.port,\n      auth: {\n        user: this.emConfig.user,\n        pass: this.emConfig.code\n      }\n    })\n  }\n\n  async sendMail(email: string, subject: string, html: string) {\n    await this.transporter.sendMail({\n      from: this.emConfig.user,\n      to: email,\n      subject,\n      html\n    })\n  }\n}\n")),(0,s.kt)("p",null,"\u65b0\u5efa\u4e00\u4e2a ",(0,s.kt)("inlineCode",{parentName:"p"},"EmailModule")," \uff0c\u7136\u540e\u5728\u91cc\u9762\u5bfc\u51fa ",(0,s.kt)("inlineCode",{parentName:"p"},"EmailService"),"\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/email/email.module.ts"',title:'"apps/server/src/modules/email/email.module.ts"'},"import { Global, Module } from '@nestjs/common'\nimport { EmailService } from './email.service'\n\n@Global()\n@Module({\n  providers: [EmailService],\n  exports: [EmailService]\n})\nexport class EmailModule {}\n")),(0,s.kt)("p",null,"\u6700\u540e\u5728 ",(0,s.kt)("inlineCode",{parentName:"p"},"AppModule")," \u4e2d\u5f15\u5165 ",(0,s.kt)("inlineCode",{parentName:"p"},"EmailModule"),"\u548c",(0,s.kt)("inlineCode",{parentName:"p"},"emailConfig"),"\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/app.module.ts"',title:'"apps/server/src/app.module.ts"'},"// ...\nimport { apiConfig, dbConfig, redisConfig, emailConfig } from '@/config'\nimport { EmailModule } from '@/modules/email/email.module'\n// ...\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [apiConfig, dbConfig, redisConfig, emailConfig]\n    }),\n    // ...\n    EmailModule\n    // ...\n  ]\n})\nexport class AppModule {}\n")),(0,s.kt)("h2",{id:"\u53d1\u9001\u9a8c\u8bc1\u7801\u63a5\u53e3"},"\u53d1\u9001\u9a8c\u8bc1\u7801\u63a5\u53e3"),(0,s.kt)("p",null,"\u5b9e\u73b0\u53d1\u9001\u9a8c\u8bc1\u7801\u7684\u63a5\u53e3\uff0c\u5148\u5728\u6839\u76ee\u5f55\u5b89\u88c5 ",(0,s.kt)("inlineCode",{parentName:"p"},"nanoid"),"\uff0c \u56e0\u4e3a\u540e\u9762\u524d\u7aef\u9879\u76ee\u4e5f\u4f1a\u7528\u5230\uff0c\u5b89\u88c5\u7248\u672c 3\uff0c ",(0,s.kt)("inlineCode",{parentName:"p"},"nanoid")," \u65b0\u7248\u4e0d\u518d\u652f\u6301 commonjs\uff0c nestjs \u4f7f\u7528\u4f1a\u62a5\u9519\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="/"',title:'"/"'},"pnpm i nanoid@3 -w\n")),(0,s.kt)("p",null,"\u5148\u5728 ",(0,s.kt)("inlineCode",{parentName:"p"},"redis")," \u6a21\u5757\u7684 ",(0,s.kt)("inlineCode",{parentName:"p"},"constant")," \u91cc\u52a0\u4e0a\u4e00\u4e2a ",(0,s.kt)("inlineCode",{parentName:"p"},"RegisterCode")," \u5e38\u91cf\u4f5c\u4e3a\u6ce8\u518c\u9a8c\u8bc1\u7801\u7684\u524d\u7f00\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/redis/constant.ts"',title:'"apps/server/src/modules/redis/constant.ts"'},"// ...\n\nexport const RedisKey = {\n  RegisterCode: 'register-code:'\n}\n")),(0,s.kt)("p",null,"\u65b0\u5efa\u4e00\u4e2a ",(0,s.kt)("inlineCode",{parentName:"p"},"AuthService"),"\uff0c\u5728\u91cc\u9762\u5148\u5b9e\u73b0\u4e00\u4e2a ",(0,s.kt)("inlineCode",{parentName:"p"},"sendCode")," \u65b9\u6cd5\uff0c\u6574\u4f53\u903b\u8f91\u4e3a\uff0c\u5148\u5224\u65ad\u5bf9\u5e94\u90ae\u7bb1\u7684\u9a8c\u8bc1\u7801\u662f\u5426\u53d1\u8fc7\uff0c\u5982\u679c\u53d1\u8fc7\uff0c\u5224\u65ad\u8ddd\u79bb\u4e0a\u6b21\u9a8c\u8bc1\u7801\u662f\u5426\u8d85\u8fc7\u4e00\u5206\u949f\uff0c\u6ca1\u6709\u5219\u63d0\u793a\u8d85\u8fc7\u4e00\u5206\u949f\u540e\u518d\u91cd\u8bd5\uff0c\u6821\u9a8c\u901a\u8fc7\u5219\u53d1\u9001\u4e00\u4e2a 6 \u4f4d\u7684\u7eaf\u6570\u5b57\u9a8c\u8bc1\u7801\uff0c\u5b58\u5230 redis \u91cc\u65f6\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\u4e3a 3 \u5206\u949f\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/user/auth.service.ts"',title:'"apps/server/src/modules/user/auth.service.ts"'},"import { Injectable, Inject, HttpException, HttpStatus } from '@nestjs/common'\nimport { RedisClientType } from 'redis'\nimport { customAlphabet } from 'nanoid'\nimport { RedisKey, RedisToken } from '@/modules/redis/constant'\nimport { EmailService } from '@/modules/email/email.service'\n\n@Injectable()\nexport class AuthService {\n  @Inject(RedisToken)\n  private readonly redisClient: RedisClientType\n\n  @Inject()\n  private readonly emailService: EmailService\n\n  async sendCode(email: string) {\n    const expireTime = await this.redisClient.expireTime(\n      RedisKey.RegisterCode + email\n    )\n    if (expireTime > 0) {\n      const dv = expireTime - Math.floor(Date.now() / 1000)\n      if (dv > 2 * 60) {\n        throw new HttpException(\n          'please try again in 1 minutes',\n          HttpStatus.NOT_ACCEPTABLE\n        )\n      }\n    }\n\n    const nanoid = customAlphabet('1234567890', 6)\n    const code = nanoid()\n    await this.emailService.sendMail(\n      email,\n      'Verification code',\n      `\n        <p>Your verification code is:</p>\n        <div style=\"width: 100px;height: 35px;\">${code}</div>\n        <p style=\"color:#999;\">effective within 3 minutes</p>\n      `\n    )\n    await this.redisClient.set(RedisKey.RegisterCode + email, code, {\n      EX: 3 * 60\n    })\n  }\n}\n")),(0,s.kt)("p",null,"\u5728 ",(0,s.kt)("inlineCode",{parentName:"p"},"UserModule")," \u91cc\u628a ",(0,s.kt)("inlineCode",{parentName:"p"},"AuthService")," \u6ce8\u518c\u4e3a\u63d0\u4f9b\u8005\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"// ...\nimport { AuthService } from './auth.service'\n\n@Module({\n  // ...\n  providers: [AuthService]\n})\nexport class UserModule {}\n")),(0,s.kt)("p",null,"\u7136\u540e\u5728 ",(0,s.kt)("inlineCode",{parentName:"p"},"AuthController")," \u91cc\u6dfb\u52a0\u4e00\u4e2a ",(0,s.kt)("inlineCode",{parentName:"p"},"sendCode")," \u63a5\u53e3\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/user/auth.controller.ts"',title:'"apps/server/src/modules/user/auth.controller.ts"'},"// ...\nimport { AuthService } from './auth.service'\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  // ...\n\n  @Post('sendCode')\n  sendCode(@Body('email') email: string) {\n    return this.authService.sendCode(email)\n  }\n}\n")),(0,s.kt)("p",null,"\u6700\u540e\u6d4b\u8bd5\u4e00\u4e0b\u770b\u770b\u6548\u679c\u3002"),(0,s.kt)("p",null,(0,s.kt)("img",{src:t(6562).Z,width:"1920",height:"1080"})),(0,s.kt)("h2",{id:"\u6ce8\u518c\u63a5\u53e3"},"\u6ce8\u518c\u63a5\u53e3"),(0,s.kt)("p",null,"\u5b9e\u73b0\u6ce8\u518c\u63a5\u53e3\u524d\uff0c\u5148\u628a\u7528\u6237\u8868\u52a0\u4e0a\uff0c\u5148\u5f80\u6570\u636e\u5e93\u6a21\u5757\u6dfb\u52a0\u4e00\u4e2a ",(0,s.kt)("inlineCode",{parentName:"p"},"entities")," \u6587\u4ef6\u5939\uff0c\u518d\u6dfb\u52a0\u4e00\u4e2a ",(0,s.kt)("inlineCode",{parentName:"p"},"BaseEntity"),"\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/db/entities/base.entity.ts"',title:'"apps/server/src/modules/db/entities/base.entity.ts"'},"import {\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn\n} from 'typeorm'\n\n@Entity()\nexport class BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @CreateDateColumn()\n  createAt: Date\n\n  @UpdateDateColumn()\n  updateAt: Date\n}\n")),(0,s.kt)("p",null,"\u7136\u540e\u6dfb\u52a0\u4e00\u4e2a ",(0,s.kt)("inlineCode",{parentName:"p"},"UserEntity")," \u7ee7\u627f ",(0,s.kt)("inlineCode",{parentName:"p"},"BaseEntity"),"\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/db/entities/user.entity.ts"',title:'"apps/server/src/modules/db/entities/user.entity.ts"'},"import { Column, Entity } from 'typeorm'\nimport { BaseEntity } from './base.entity'\n\n@Entity({ name: 'user' })\nexport class UserEntity extends BaseEntity {\n  @Column({\n    length: 32,\n    unique: true\n  })\n  username: string\n\n  @Column({\n    length: 50,\n    unique: true\n  })\n  email: string\n\n  @Column()\n  password: string\n\n  @Column({\n    length: 32,\n    nullable: true\n  })\n  nickname: string\n}\n")),(0,s.kt)("p",null,"\u518d\u6dfb\u52a0\u4e00\u4e2a ",(0,s.kt)("inlineCode",{parentName:"p"},"index.ts")," \u6587\u4ef6\u5bfc\u51fa\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/db/entities/index.ts"',title:'"apps/server/src/modules/db/entities/index.ts"'},"export * from './base.entity'\nexport * from './user.entity'\n")),(0,s.kt)("p",null,"\u56e0\u4e3a ",(0,s.kt)("inlineCode",{parentName:"p"},"DbModule")," \u7684 ",(0,s.kt)("inlineCode",{parentName:"p"},"TypeOrmModule.forRootAsync")," \u914d\u7f6e\u4e86 ",(0,s.kt)("inlineCode",{parentName:"p"},"autoLoadEntities: true"),"\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u81ea\u884c\u5bfc\u5165\u4e86\u3002"),(0,s.kt)("p",null,"\u63a5\u4e0b\u6765\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a dto \u5bf9\u8c61\u4f5c\u4e3a\u6ce8\u518c\u63a5\u53e3\u6240\u9700\u8981\u7684\u6570\u636e\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/user/auth.dto.ts"',title:'"apps/server/src/modules/user/auth.dto.ts"'},"export class RegisterDto {\n  username: string\n  email: string\n  password: string\n  code: string\n}\n")),(0,s.kt)("p",null,"\u56e0\u4e3a\u6dfb\u52a0\u7528\u6237\u9700\u8981\u52a0\u5bc6\u5bc6\u7801\uff0c\u6240\u4ee5\u5148\u6dfb\u52a0\u4e00\u4e2a\u52a0\u5bc6\u51fd\u6570\uff0c\u987a\u4fbf\u628a\u6bd4\u8f83\u51fd\u6570\u4e5f\u52a0\u4e0a\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/lib/utils.ts"',title:'"apps/server/src/lib/utils.ts"'},"import { createHash } from 'crypto'\n\nexport function generatePass(pass: string) {\n  const sha1 = createHash('sha1')\n  const ciphertext = sha1.update(pass).digest('hex')\n  return ciphertext\n}\n\nexport function comparePass(pass: string, encryptPass: string) {\n  const sha1 = createHash('sha1')\n  const ciphertext = sha1.update(pass).digest('hex')\n  return ciphertext === encryptPass\n}\n")),(0,s.kt)("p",null,"\u5728 ",(0,s.kt)("inlineCode",{parentName:"p"},"UserModule")," \u91cc\u7528 ",(0,s.kt)("inlineCode",{parentName:"p"},"TypeOrmModule.forFeature")," \u5bfc\u5165 ",(0,s.kt)("inlineCode",{parentName:"p"},"UserEntity")," \uff0c\u8fd9\u6837\u540e\u9762\u7684 ",(0,s.kt)("inlineCode",{parentName:"p"},"AuthService")," \u5c31\u53ef\u4ee5\u4f7f\u7528\u5bf9\u5e94\u7684 ",(0,s.kt)("inlineCode",{parentName:"p"},"Repository")," \u4e86\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/user/user.module.ts"',title:'"apps/server/src/modules/user/user.module.ts"'},"// ...\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { UserEntity } from '@/modules/db/entities'\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity])]\n  // ...\n})\nexport class UserModule {}\n")),(0,s.kt)("p",null,"\u5728 ",(0,s.kt)("inlineCode",{parentName:"p"},"AuthService")," \u91cc\u5b9e\u73b0\u7ec6\u8282\uff0c\u5148\u4ece redis \u5224\u65ad\u90ae\u7bb1\u9a8c\u8bc1\u7801\u662f\u5426\u6b63\u786e\uff0c\u518d\u4ece\u6570\u636e\u5e93\u5224\u65ad\u7528\u6237\u540d\u662f\u5426\u5df2\u7ecf\u88ab\u6ce8\u518c\uff0c\u5982\u679c\u90fd\u901a\u8fc7\uff0c\u6700\u540e\u7ed9\u7528\u6237\u6dfb\u52a0\u4e00\u4e2a\u968f\u673a\u6635\u79f0\uff0c\u518d\u7528 ",(0,s.kt)("inlineCode",{parentName:"p"},"generatePass")," \u52a0\u5bc6\u4e00\u4e0b\u5bc6\u7801\uff0c\u5c31\u53ef\u4ee5\u628a\u5176\u4f59\u4fe1\u606f\u5b58\u5165\u6570\u636e\u5e93\u4e86\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/user/auth.service.ts"',title:'"apps/server/src/modules/user/auth.service.ts"'},"// ...\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\nimport { UserEntity } from '@/modules/db/entities'\nimport { RegisterDto } from './auth.dto'\n\n@Injectable()\nexport class AuthService {\n  // ...\n  @InjectRepository(UserEntity)\n  private readonly userRepository: Repository<UserEntity>\n  // ...\n\n  async register(registerDto: RegisterDto) {\n    const registerCode = await this.redisClient.get(\n      RedisKey.RegisterCode + registerDto.email\n    )\n    if (!registerCode || registerCode !== registerDto.code) {\n      throw new HttpException(\n        'email verification code is incorrect',\n        HttpStatus.NOT_ACCEPTABLE\n      )\n    }\n\n    const user = await this.userRepository.findOne({\n      where: { username: registerDto.username }\n    })\n    if (user) {\n      throw new HttpException(\n        'username already exists',\n        HttpStatus.NOT_ACCEPTABLE\n      )\n    }\n\n    const newUser = this.userRepository.create({\n      username: registerDto.username,\n      email: registerDto.email,\n      nickname: 'ying#' + nanoid(8),\n      password: generatePass(registerDto.password)\n    })\n\n    await this.userRepository.save(newUser)\n    await this.redisClient.del(RedisKey.RegisterCode + registerDto.email)\n  }\n\n  // ...\n}\n")),(0,s.kt)("p",null,"\u6700\u540e\u7ed9 ",(0,s.kt)("inlineCode",{parentName:"p"},"AuthController")," \u6dfb\u52a0\u4e0a\u6ce8\u518c\u63a5\u53e3\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/user/auth.controller.ts"',title:'"apps/server/src/modules/user/auth.controller.ts"'},"import { Body, Controller, Post } from '@nestjs/common'\nimport { AuthService } from './auth.service'\nimport { RegisterDto } from './auth.dto'\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  // ...\n\n  @Post('register')\n  register(@Body() registerDto: RegisterDto) {\n    return this.authService.register(registerDto)\n  }\n}\n")),(0,s.kt)("p",null,"\u73b0\u5728\u53ef\u4ee5\u81ea\u884c\u6d4b\u8bd5\u4e00\u4e0b\u6574\u4f53\u6d41\u7a0b\u3002"),(0,s.kt)("p",null,"\u8fd8\u6709\u4e00\u4e2a\u7ec6\u8282\u9700\u8981\u52a0\u4e0a\uff0c\u5c31\u662f\u53d1\u9001\u9a8c\u8bc1\u7801\u7801\u65f6\uff0c\u5148\u5224\u65ad\u4e00\u4e0b\u90ae\u7bb1\u662f\u5426\u88ab\u6ce8\u518c\u4e86\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/user/auth.service.ts"',title:'"apps/server/src/modules/user/auth.service.ts"'},"// ...\n\n@Injectable()\nexport class AuthService {\n  // ...\n\n  async sendCode(email: string) {\n    // ...\n\n    const user = await this.userRepository.findOne({ where: { email } })\n    if (user) {\n      throw new HttpException(\n        'user email already exists',\n        HttpStatus.NOT_ACCEPTABLE\n      )\n    }\n\n    const nanoid = customAlphabet('1234567890', 6)\n    const code = nanoid()\n    // ...\n  }\n}\n")),(0,s.kt)("p",null,"\u90a3\u4e48\u672c\u8282\u7684\u6ce8\u518c\u63a5\u53e3\u5b9e\u73b0\u5c31\u5230\u8fd9\u91cc\u7ed3\u675f\u4e86\u3002"))}c.isMDXComponent=!0},1863:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/01-90bb76305b9c5e79a0a587d3adab4dc2.png"},7957:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/02-830be718789c4c30a2eae5f191a12279.png"},6562:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/03-c4dac08b522121fb4b6266215b6efcbc.gif"}}]);