"use strict";(self.webpackChunkying_blog=self.webpackChunkying_blog||[]).push([[3458],{9613:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var o=t(9496);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(t),d=r,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return t?o.createElement(g,a(a({ref:n},p),{},{components:t})):o.createElement(g,a({ref:n},p))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,a=new Array(s);a[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[m]="string"==typeof e?e:r,a[1]=i;for(var c=2;c<s;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1166:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=t(8957),r=(t(9496),t(9613));const s={id:"docking-message-api",sidebar_label:"\u5ba2\u6237\u7aef\u5bf9\u63a5\u7fa4\u804aapi",title:"\u5ba2\u6237\u7aef\u5bf9\u63a5\u7fa4\u804aapi"},a=void 0,i={unversionedId:"ying-chat/docking-message-api",id:"ying-chat/docking-message-api",title:"\u5ba2\u6237\u7aef\u5bf9\u63a5\u7fa4\u804aapi",description:"\u51c6\u5907",source:"@site/docs/ying-chat/17-docking-message-api.md",sourceDirName:"ying-chat",slug:"/ying-chat/docking-message-api",permalink:"/docs/ying-chat/docking-message-api",draft:!1,tags:[],version:"current",sidebarPosition:17,frontMatter:{id:"docking-message-api",sidebar_label:"\u5ba2\u6237\u7aef\u5bf9\u63a5\u7fa4\u804aapi",title:"\u5ba2\u6237\u7aef\u5bf9\u63a5\u7fa4\u804aapi"},sidebar:"yingChat",previous:{title:"\u7fa4\u804a api",permalink:"/docs/ying-chat/message-api"},next:{title:"\u9884\u89c8\u7ec4\u4ef6\u548c\u8def\u7531\u7f13\u5b58",permalink:"/docs/ying-chat/preview-component-and-router-cache"}},l={},c=[{value:"\u51c6\u5907",id:"\u51c6\u5907",level:2},{value:"vo \u6587\u4ef6",id:"vo-\u6587\u4ef6",level:3},{value:"api \u6587\u4ef6",id:"api-\u6587\u4ef6",level:3},{value:"\u4f1a\u8bdd\u5217\u8868\u5bf9\u63a5",id:"\u4f1a\u8bdd\u5217\u8868\u5bf9\u63a5",level:2},{value:"ConversationProvider",id:"conversationprovider",level:3},{value:"\u8def\u7531\u5b8c\u5584",id:"\u8def\u7531\u5b8c\u5584",level:3},{value:"\u5bf9\u8bdd\u9875\u9762\u5bf9\u63a5\u3002",id:"\u5bf9\u8bdd\u9875\u9762\u5bf9\u63a5",level:2},{value:"\u53d1\u9001\u6d88\u606f\u7ec4\u4ef6\u7f16\u5199",id:"\u53d1\u9001\u6d88\u606f\u7ec4\u4ef6\u7f16\u5199",level:3},{value:"\u901a\u7528\u6eda\u52a8\u7ec4\u4ef6\u7684\u7f16\u5199",id:"\u901a\u7528\u6eda\u52a8\u7ec4\u4ef6\u7684\u7f16\u5199",level:3},{value:"\u7fa4\u804a\u9875\u9762\u5b8c\u5584\u5bf9\u63a5",id:"\u7fa4\u804a\u9875\u9762\u5b8c\u5584\u5bf9\u63a5",level:3}],p={toc:c},m="wrapper";function u(e){let{components:n,...s}=e;return(0,r.kt)(m,(0,o.Z)({},p,s,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"\u51c6\u5907"},"\u51c6\u5907"),(0,r.kt)("h3",{id:"vo-\u6587\u4ef6"},"vo \u6587\u4ef6"),(0,r.kt)("p",null,"\u6dfb\u52a0\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"conversation.vo.ts"),"\u6587\u4ef6\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="packages/shared/src/vo/conversation.vo.ts"',title:'"packages/shared/src/vo/conversation.vo.ts"'},"import { GroupMessageType } from '../enum'\nimport { FileVo } from './file.vo'\nimport { GroupVo } from './group.vo'\nimport { UserVo } from './user.vo'\n\nexport type ConversationVo = {\n  id: number\n  userId: number\n  groupId: number\n  unreadNum: number\n  group: GroupVo\n}\n\nexport type GroupMessageVo = {\n  id: number\n  type: GroupMessageType\n  content: string\n  groupId: number\n  coverId?: number\n  cover?: FileVo\n  fileId?: number\n  file?: FileVo\n  userId: number\n  user: UserVo\n  createAt: string\n  updateAt: string\n}\n")),(0,r.kt)("p",null,"\u5bfc\u51fa\u4e00\u4e0b\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="packages/shared/src/vo/index.ts"',title:'"packages/shared/src/vo/index.ts"'},"// ...\nexport * from './conversation.vo'\n")),(0,r.kt)("h3",{id:"api-\u6587\u4ef6"},"api \u6587\u4ef6"),(0,r.kt)("p",null,"\u6dfb\u52a0\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"conversation.ts"),"\u6587\u4ef6\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/src/api/conversation.ts"',title:'"apps/client/src/api/conversation.ts"'},"import {\n  ConversationVo,\n  GroupMessageListDto,\n  GroupMessageVo,\n  SendMsgDto\n} from '@ying-chat/shared'\nimport { request } from './request'\n\nexport function getConversationList(): Promise<ConversationVo[]> {\n  return request.get('/conversation/list')\n}\n\nexport function getGroupConversationMessageList(\n  query: GroupMessageListDto\n): Promise<GroupMessageVo[]> {\n  return request.get('/conversation/group/message/list', { params: query })\n}\n\nexport function sendTextGroupMessage(dto: SendMsgDto): Promise<GroupMessageVo> {\n  return request.post('/conversation/group/message/text', dto)\n}\n\nexport function sendImageGroupMessage(\n  file: File,\n  groupId: string\n): Promise<GroupMessageVo> {\n  const form = new FormData()\n  form.append('file', file)\n  form.append('groupId', groupId)\n  return request.post('/conversation/group/message/image', form)\n}\n\nexport function sendVideoGroupMessage(\n  file: File,\n  coverFile: File,\n  groupId: string\n): Promise<GroupMessageVo> {\n  const form = new FormData()\n  form.append('file', file)\n  form.append('coverFile', coverFile)\n  form.append('groupId', groupId)\n  return request.post('/conversation/group/message/video', form)\n}\n")),(0,r.kt)("p",null,"\u5bfc\u51fa\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/src/api/index.ts"',title:'"apps/client/src/api/index.ts"'},"// ...\nimport * as conversationApi from './conversation'\n\nexport {\n  // ...\n  conversationApi\n}\n")),(0,r.kt)("h2",{id:"\u4f1a\u8bdd\u5217\u8868\u5bf9\u63a5"},"\u4f1a\u8bdd\u5217\u8868\u5bf9\u63a5"),(0,r.kt)("h3",{id:"conversationprovider"},"ConversationProvider"),(0,r.kt)("p",null,"\u63a5\u4e0b\u6765\u5148\u5b9e\u73b0\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"ConversationProvider"),"\uff0c\u5199\u8fd9\u4e2a Provider \u662f\u4e3a\u4e86\u65b9\u4fbf\u5728\u540e\u9762\u5373\u65f6\u901a\u8baf\u65f6\uff0c\u7edf\u4e00\u66f4\u65b0\u5de6\u4fa7\u4f1a\u8bdd\u5217\u8868\u3002"),(0,r.kt)("p",null,"\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"conversation"),"\u6587\u4ef6\u5939\u4e0b\uff0c\u6dfb\u52a0\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"use-conversation.ts"),"\u6587\u4ef6\uff0c\u5728\u91cc\u9762\u5199\u597d\u5bf9\u8bdd\u5217\u8868\u76f8\u5173\u7684\u903b\u8f91\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/src/pages/conversation/use-conversation.ts"',title:'"apps/client/src/pages/conversation/use-conversation.ts"'},"import { createContext, useContext, useMemo } from 'react'\nimport { useCallback } from 'react'\nimport { useLocation, useParams } from 'react-router-dom'\nimport { conversationApi } from '@/api'\nimport { useApi } from '@/api/use-api'\nimport { ConversationVo } from '@ying-chat/shared'\n\nexport const useConversationLogic = () => {\n  const { pathname } = useLocation()\n  const { groupId } = useParams()\n\n  const { data } = useApi<ConversationVo[]>({\n    func: useCallback(() => conversationApi.getConversationList(), [])\n  })\n\n  const currentConversation = useMemo(() => {\n    if (pathname.startsWith('/conversation/group/')) {\n      const conversation = data?.find(el => el.groupId === Number(groupId))\n      return conversation\n    }\n\n    return undefined\n  }, [data, pathname, groupId])\n\n  const isActived = useCallback(\n    (currentId: number) => {\n      return currentId === currentConversation?.id\n    },\n    [currentConversation]\n  )\n\n  return {\n    coversations: data,\n    isActived\n  }\n}\n\ntype TConversationContext = {\n  coversations: ConversationVo[] | undefined\n  isActived: (id: number) => boolean\n}\n\nexport const ConversationContext = createContext<TConversationContext>({\n  coversations: undefined,\n  isActived: () => false\n})\n\nexport const useConversation = () => {\n  return useContext(ConversationContext)\n}\n")),(0,r.kt)("p",null,"\u65b0\u5efa",(0,r.kt)("inlineCode",{parentName:"p"},"conversation-provider.tsx"),"\u4f7f\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"use-conversation"),"\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="apps\\client\\src\\pages\\conversation\\conversation-provider.tsx"',title:'"apps\\client\\src\\pages\\conversation\\conversation-provider.tsx"'},"import React from 'react'\nimport { ConversationContext, useConversationLogic } from './use-conversation'\n\ntype ConversationProviderProps = {\n  children: React.ReactNode\n}\n\nexport const ConversationProvider: React.FC<ConversationProviderProps> = ({\n  children\n}) => {\n  const { coversations, isActived } = useConversationLogic()\n\n  return (\n    <ConversationContext.Provider\n      value={{\n        coversations,\n        isActived\n      }}\n    >\n      {children}\n    </ConversationContext.Provider>\n  )\n}\n")),(0,r.kt)("h3",{id:"\u8def\u7531\u5b8c\u5584"},"\u8def\u7531\u5b8c\u5584"),(0,r.kt)("p",null,"\u6309\u7167\u4e0a\u6b21\u7fa4\u7ec4\u90a3\u91cc\u90a3\u6837\u628a\u8def\u7531\u642d\u5efa\u597d\u3002"),(0,r.kt)("p",null,"\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"conversation"),"\u4e0b\u9762\u6dfb\u52a0\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"sidebar"),"\u7ec4\u4ef6\u4f5c\u4e3a\u5c55\u793a\u7528\u6237\u7fa4\u4f1a\u8bdd\u5217\u8868\u7684\u5c55\u793a\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="apps/client/src/pages/conversation/sidebar.tsx"',title:'"apps/client/src/pages/conversation/sidebar.tsx"'},"import { useNavigate, useParams } from 'react-router-dom'\nimport { Avatar, Badge, cn } from '@nextui-org/react'\nimport {\n  ConversationVo,\n  GroupMessageType,\n  GroupMessageVo\n} from '@ying-chat/shared'\nimport { useConversation } from './use-conversation'\n\nconst renderMessage = (message?: GroupMessageVo) => {\n  if (!message) return ''\n  let recentMsg = message.user.nickname + ': '\n\n  switch (message.type) {\n    case GroupMessageType.Text:\n      recentMsg = recentMsg + message.content\n      break\n    case GroupMessageType.Image:\n      recentMsg = recentMsg + '[\u56fe\u7247]'\n      break\n    case GroupMessageType.Video:\n      recentMsg = recentMsg + '[\u89c6\u9891]'\n      break\n  }\n\n  return recentMsg\n}\n\nexport const Sidebar = () => {\n  const navigate = useNavigate()\n  const { groupId } = useParams()\n\n  const { coversations, isActived } = useConversation()\n\n  const handleClick = (conversation: ConversationVo) => {\n    if (conversation.groupId !== Number(groupId)) {\n      const routeKey = `group/${conversation.groupId}`\n      navigate(routeKey)\n    }\n  }\n\n  return (\n    <div className=\"w-60 py-4 overflow-y-auto no-scrollbar flex flex-col bg-content2\">\n      {coversations?.map(el => (\n        <Badge\n          content={el.unreadNum}\n          color=\"danger\"\n          shape=\"rectangle\"\n          isInvisible={!el.unreadNum}\n          key={el.id}\n        >\n          <div\n            className={cn(\n              'flex p-2 w-full cursor-pointer',\n              isActived(el.id) && 'bg-content3'\n            )}\n            onClick={() => handleClick(el)}\n          >\n            <Avatar\n              radius=\"sm\"\n              className=\"mr-2 flex-shrink-0\"\n              src={el.group.cover.url}\n            />\n\n            <div className=\"flex-1 w-0\">\n              <div className=\"flex justify-between\">\n                <p className=\"text-sm\">{el.group.name}</p>\n              </div>\n\n              <p className=\"text-sm text-foreground-500 text-ellipsis overflow-hidden break-all whitespace-nowrap\">\n                {renderMessage(el.recentMsg)}\n              </p>\n            </div>\n          </div>\n        </Badge>\n      ))}\n    </div>\n  )\n}\n")),(0,r.kt)("p",null,"\u5148\u7b80\u5355\u6dfb\u52a0\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"ConversationDetail")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/src/pages/conversation/conversation-detail.tsx"',title:'"apps/client/src/pages/conversation/conversation-detail.tsx"'},"import { useParams } from 'react-router-dom'\n\nexport const ConversationDetail = () => {\n  const { groupId } = useParams()\n  return (\n    <div className=\"h-full fc overflow-y-auto no-scrollbar bg-content3\">\n      ConversationDetail-{groupId}\n    </div>\n  )\n}\n")),(0,r.kt)("p",null,"\u4fee\u6539",(0,r.kt)("inlineCode",{parentName:"p"},"ConversationPage"),"\uff0c\u5728\u91cc\u9762\u52a0\u4e0a",(0,r.kt)("inlineCode",{parentName:"p"},"ConversationProvider"),"\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"Outlet"),"\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"Sidebar"),"\uff0c\u540c\u65f6\u5bfc\u51fa",(0,r.kt)("inlineCode",{parentName:"p"},"ConversationDetail"),"\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="apps/client/src/pages/contact/index.tsx"',title:'"apps/client/src/pages/contact/index.tsx"'},"import { Outlet } from 'react-router-dom'\nimport { Sidebar } from './sidebar'\nimport { ConversationProvider } from './conversation-provider'\nexport { ConversationDetail } from './conversation-detail'\n\nexport const ConversationPage = () => {\n  return (\n    <ConversationProvider>\n      <div className=\"h-full flex flex-row\">\n        <Sidebar />\n\n        <main className=\"flex-1\">\n          <Outlet />\n        </main>\n      </div>\n    </ConversationProvider>\n  )\n}\n")),(0,r.kt)("p",null,"\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"routes.tsx"),"\u91cc\u6dfb\u52a0\u4e00\u4e0b\u914d\u7f6e\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="apps/client/src/router/routes.tsx"',title:'"apps/client/src/router/routes.tsx"'},"// ...\nimport { MessageSquare, Users } from 'lucide-react'\nimport { ConversationDetail, ConversationPage } from '@/pages/conversation'\n\nexport const routes = [\n  {\n    path: '/',\n    element: <AppLayout />,\n    children: [\n      // ...\n      {\n        path: 'conversation',\n        element: <ConversationPage />,\n        children: [\n          {\n            index: true,\n            element: (\n              <DefaultWrap>\n                <Users size={60} />\n              </DefaultWrap>\n            )\n          },\n          {\n            path: 'group/:groupId',\n            element: <ConversationDetail />\n          }\n        ]\n      }\n      // ...\n    ]\n  }\n  // ...\n]\n")),(0,r.kt)("p",null,"\u5148\u6765\u6d4b\u8bd5\u4e00\u4e0b\u3002"),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(1938).Z,width:"1920",height:"1080"})),(0,r.kt)("h2",{id:"\u5bf9\u8bdd\u9875\u9762\u5bf9\u63a5"},"\u5bf9\u8bdd\u9875\u9762\u5bf9\u63a5\u3002"),(0,r.kt)("h3",{id:"\u53d1\u9001\u6d88\u606f\u7ec4\u4ef6\u7f16\u5199"},"\u53d1\u9001\u6d88\u606f\u7ec4\u4ef6\u7f16\u5199"),(0,r.kt)("p",null,"\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"components"),"\u6587\u4ef6\u5939\u6dfb\u52a0\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"chat"),"\u6587\u4ef6\u5939\uff0c\u5728\u91cc\u9762\u5b9e\u73b0\u6240\u6709\u9700\u8981\u7528\u5230\u7684\u804a\u5929\u7ec4\u4ef6\u3002"),(0,r.kt)("p",null,"\u5b9e\u73b0",(0,r.kt)("inlineCode",{parentName:"p"},"ChatSelectFile"),"\u7ec4\u4ef6\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="apps/client/src/components/chat/chat-select-file.tsx"',title:'"apps/client/src/components/chat/chat-select-file.tsx"'},'import React from \'react\'\nimport { PlusCircle } from \'lucide-react\'\nimport { SelectFileType, selectFile } from \'@/components/upload\'\nimport {\n  Dropdown,\n  DropdownTrigger,\n  DropdownMenu,\n  DropdownItem\n} from \'@nextui-org/react\'\n\ntype ChatSelectFileProps = {\n  onFileSelect: (file: File, type: SelectFileType) => void\n}\n\nexport const ChatSelectFile: React.FC<ChatSelectFileProps> = ({\n  onFileSelect\n}) => {\n  return (\n    <Dropdown backdrop="opaque">\n      <DropdownTrigger>\n        <PlusCircle className="cursor-pointer" />\n      </DropdownTrigger>\n      <DropdownMenu aria-label="Message Actions">\n        <DropdownItem\n          key="Image"\n          onClick={() => {\n            selectFile(SelectFileType.Image).then(file => {\n              onFileSelect(file, SelectFileType.Image)\n            })\n          }}\n        >\n          Image\n        </DropdownItem>\n        <DropdownItem\n          key="Video"\n          onClick={() => {\n            selectFile(SelectFileType.Video).then(file => {\n              onFileSelect(file, SelectFileType.Video)\n            })\n          }}\n        >\n          Video\n        </DropdownItem>\n      </DropdownMenu>\n    </Dropdown>\n  )\n}\n')),(0,r.kt)("p",null,"\u5b89\u88c5\u4e00\u4e0b\u8868\u60c5\u5305\u7ec4\u4ef6\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="apps/client"',title:'"apps/client"'},"pnpm i @emoji-mart/react @emoji-mart/data\n")),(0,r.kt)("p",null,"\u5b9e\u73b0",(0,r.kt)("inlineCode",{parentName:"p"},"ChatEmoji"),"\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="apps/client/src/components/chat/chat-emoji.tsx"',title:'"apps/client/src/components/chat/chat-emoji.tsx"'},"import React from 'react'\nimport { Popover, PopoverTrigger, PopoverContent } from '@nextui-org/react'\nimport Picker from '@emoji-mart/react'\nimport data from '@emoji-mart/data'\nimport { Smile } from 'lucide-react'\nimport { useTheme } from '../theme-provider'\n\ntype ChatEmojiProps = {\n  onEmojiSelect?: (emoji: string) => void\n}\n\nexport const ChatEmoji: React.FC<ChatEmojiProps> = ({ onEmojiSelect }) => {\n  const { theme } = useTheme()\n\n  return (\n    <Popover placement=\"top\" backdrop=\"opaque\">\n      <PopoverTrigger>\n        <Smile className=\"cursor-pointer\" />\n      </PopoverTrigger>\n      <PopoverContent className=\"bg-transparent shadow-none\">\n        <Picker\n          theme={theme}\n          data={data}\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          onEmojiSelect={(emoji: any) => {\n            onEmojiSelect && onEmojiSelect(emoji.native)\n          }}\n        />\n      </PopoverContent>\n    </Popover>\n  )\n}\n")),(0,r.kt)("p",null,"\u5b9e\u73b0",(0,r.kt)("inlineCode",{parentName:"p"},"ChatInput"),"\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="apps/client/src/components/chat/chat-input.tsx"',title:'"apps/client/src/components/chat/chat-input.tsx"'},"import React, { useEffect, useRef, useState } from 'react'\nimport { Textarea } from '@nextui-org/react'\nimport { Loader2, SendHorizontal } from 'lucide-react'\nimport { toast } from 'sonner'\nimport { GroupMessageType } from '@ying-chat/shared'\nimport { SelectFileType } from '@/components/upload'\nimport { ChatEmoji } from './chat-emoji'\nimport { ChatSelectFile } from './chat-select-file'\n\ntype ChatInputProps = {\n  onSend: (type: GroupMessageType, content: string | File) => Promise<void>\n}\n\nexport const ChatInput: React.FC<ChatInputProps> = ({ onSend }) => {\n  const [inputValue, setInputValue] = useState('')\n  const [sendLoading, setSendLoading] = useState(false)\n  const inputRef = useRef<HTMLTextAreaElement>(null)\n\n  const sendTextMsg = () => {\n    if (!inputValue) {\n      return toast.warning('Please enter the message content!')\n    }\n    send(GroupMessageType.Text, inputValue)\n  }\n\n  const send = async (type: GroupMessageType, content: string | File) => {\n    try {\n      setSendLoading(true)\n\n      await onSend(type, content)\n\n      setInputValue('')\n      toast.success('Message sent successfully!')\n    } catch {\n    } finally {\n      setSendLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    inputRef.current?.focus()\n  }, [sendLoading, inputValue])\n\n  return (\n    <div className=\"flex flex-shrink-0 items-end rounded-md m-4 p-2 bg-content2\">\n      <Textarea\n        ref={inputRef}\n        classNames={{\n          inputWrapper: 'shadow-none'\n        }}\n        placeholder=\"input message here\"\n        maxRows={3}\n        isDisabled={sendLoading}\n        value={inputValue}\n        onChange={e => {\n          setInputValue(e.target.value)\n        }}\n        onKeyDown={e => {\n          if (!e.shiftKey && e.key == 'Enter') {\n            e.preventDefault()\n            sendTextMsg()\n          }\n        }}\n      />\n      <div className=\"flex gap-1 ml-2\">\n        <ChatSelectFile\n          onFileSelect={(file, type) => {\n            if (type === SelectFileType.Image) {\n              send(GroupMessageType.Image, file)\n            } else if (type === SelectFileType.Video) {\n              send(GroupMessageType.Video, file)\n            }\n          }}\n        />\n        <ChatEmoji\n          onEmojiSelect={emoji => {\n            setInputValue(prevValue => prevValue + emoji)\n          }}\n        />\n        {sendLoading ? (\n          <Loader2 className=\"animate-spin\" />\n        ) : (\n          <SendHorizontal className=\"cursor-pointer\" onClick={sendTextMsg} />\n        )}\n      </div>\n    </div>\n  )\n}\n")),(0,r.kt)("h3",{id:"\u901a\u7528\u6eda\u52a8\u7ec4\u4ef6\u7684\u7f16\u5199"},"\u901a\u7528\u6eda\u52a8\u7ec4\u4ef6\u7684\u7f16\u5199"),(0,r.kt)("p",null,"\u5728\u5b9e\u73b0\u4e4b\u524d\uff0c\u5148\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"src"),"\u6dfb\u52a0\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"utils.ts"),"\u6587\u4ef6\uff0c\u5728\u91cc\u9762\u5148\u5b9e\u73b0\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"debounce"),"\u51fd\u6570\uff0c\u540e\u9762\u8981\u7528\u5230\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/src/utils.ts"',title:'"apps/client/src/utils.ts"'},"export function debounce<T>(callback: (params: T) => void, delay = 200) {\n  let timer = 0\n  return function (params: T) {\n    if (timer) clearTimeout(timer)\n    timer = setTimeout(() => {\n      callback(params)\n    }, delay)\n  }\n}\n")),(0,r.kt)("p",null,"\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"components"),"\u6587\u4ef6\u5939\u6dfb\u52a0\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"scroll-box"),"\u6587\u4ef6\u5939\uff0c\u7136\u540e\u5148\u6dfb\u52a0\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"scroll-provider.ts"),"\u6587\u4ef6\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="apps/client/src/components/scroll-box/scroll-provider.ts"',title:'"apps/client/src/components/scroll-box/scroll-provider.ts"'},"import {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState\n} from 'react'\n\nexport type IntersectingCallback = () => void\n\nexport type UnObserverCallback = () => void\n\ntype TScrollBoxContext = {\n  observer:\n    | ((el: Element, func: IntersectingCallback) => UnObserverCallback)\n    | undefined\n}\n\nexport const useIntersectionObserver = () => {\n  const [intersectionObserver, setIntersectionObserver] =\n    useState<IntersectionObserver>()\n\n  const mapRef = useRef(new Map<Element, IntersectingCallback>())\n\n  useEffect(() => {\n    const intersectionObserver = new IntersectionObserver(\n      entries => {\n        for (const entry of entries) {\n          if (entry.isIntersecting) {\n            const element = entry.target\n            const func = mapRef.current.get(element)\n            func && func()\n          }\n        }\n      },\n      {\n        threshold: 0.6\n      }\n    )\n    setIntersectionObserver(intersectionObserver)\n  }, [])\n\n  const observer = useCallback(\n    (el: Element, func: IntersectingCallback) => {\n      intersectionObserver?.observe(el)\n      mapRef.current.set(el, func)\n\n      return () => {\n        intersectionObserver?.unobserve(el)\n        mapRef.current.delete(el)\n      }\n    },\n    [intersectionObserver]\n  )\n\n  return {\n    observer\n  }\n}\n\nexport const useObserver = () => {\n  return useContext(ScrollBoxContext)\n}\n\nexport const ScrollBoxContext = createContext<TScrollBoxContext>({\n  observer: undefined\n})\n")),(0,r.kt)("p",null,"\u5b9e\u73b0",(0,r.kt)("inlineCode",{parentName:"p"},"ScollBox"),"\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="apps/client/src/components/scroll-box/scroll-box.tsx"',title:'"apps/client/src/components/scroll-box/scroll-box.tsx"'},"import React, {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useLayoutEffect,\n  useRef\n} from 'react'\nimport { cn } from '@nextui-org/react'\nimport { debounce } from '@/utils'\nimport { ScrollBoxContext, useIntersectionObserver } from './scroll-provider'\n\ntype ScollBoxProps = {\n  children: React.ReactNode\n  className?: string\n  onTop?: () => void\n  onBottom?: () => void\n}\n\nexport type ScollBoxHandle = {\n  scrollToBottom: (behavior?: ScrollBehavior) => void\n  getDistanceFromBottom: () => number\n  keepBottom: (callback: () => void) => void\n  keepPosition: (callback: () => void) => void\n}\n\nexport const ScollBox = forwardRef<ScollBoxHandle, ScollBoxProps>(\n  ({ children, className, onTop, onBottom }, ref) => {\n    const scrollDivRef = useRef<HTMLDivElement>(null)\n    const originHeight = useRef(0)\n    const { observer } = useIntersectionObserver()\n\n    const scrollToBottom = (behavior: ScrollBehavior = 'instant') => {\n      scrollDivRef.current?.scrollTo({\n        top: scrollDivRef.current.scrollHeight,\n        behavior\n      })\n    }\n\n    const getDistanceFromBottom = () => {\n      const dom = scrollDivRef.current\n      if (!dom) return 0\n      return dom.scrollHeight - dom.scrollTop - dom.clientHeight\n    }\n\n    const keepBottom = (callback: () => void) => {\n      const distanceFromBottom = getDistanceFromBottom()\n\n      callback()\n\n      setTimeout(() => {\n        if (distanceFromBottom <= 300) {\n          scrollToBottom('smooth')\n        } else {\n          scrollToBottom('instant')\n        }\n      })\n    }\n\n    const keepPosition = async (callback: () => void) => {\n      const dom = scrollDivRef.current\n      if (!dom) return\n\n      originHeight.current = dom.scrollHeight\n      callback()\n    }\n\n    useLayoutEffect(() => {\n      const dom = scrollDivRef.current\n      if (!dom) return\n\n      if (originHeight.current) {\n        dom.scrollTo({\n          top: dom.scrollHeight - originHeight.current\n        })\n        originHeight.current = 0\n      }\n    }, [children])\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        scrollToBottom,\n        getDistanceFromBottom,\n        keepBottom,\n        keepPosition\n      }),\n      []\n    )\n\n    useEffect(() => {\n      const dom = scrollDivRef.current\n      if (!dom) return\n\n      const scollCallback = debounce<Event>((e: Event) => {\n        const el = e.target as HTMLDivElement,\n          scrollTop = el.scrollTop,\n          scrollHeight = el.scrollHeight,\n          offsetHeight = el.offsetHeight\n        if (onTop && scrollTop <= 0) {\n          onTop()\n        } else if (onBottom && offsetHeight + scrollTop + 5 >= scrollHeight) {\n          onBottom()\n        }\n      }, 200)\n\n      dom.addEventListener('scroll', scollCallback)\n\n      return () => {\n        dom.removeEventListener('scroll', scollCallback)\n      }\n    }, [onTop, onBottom, observer])\n\n    return (\n      <ScrollBoxContext.Provider value={{ observer }}>\n        <div\n          id=\"scroll-box\"\n          className={cn('overflow-y-auto scroll-box', className)}\n          ref={scrollDivRef}\n          aria-label=\"scrollbox\"\n        >\n          {children}\n        </div>\n      </ScrollBoxContext.Provider>\n    )\n  }\n)\n")),(0,r.kt)("p",null,"\u5bfc\u51fa\u4e00\u4e0b\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="apps/client/src/components/scroll-box/index.ts"',title:'"apps/client/src/components/scroll-box/index.ts"'},"export * from './scroll-box'\nexport * from './scroll-provider'\n")),(0,r.kt)("h3",{id:"\u7fa4\u804a\u9875\u9762\u5b8c\u5584\u5bf9\u63a5"},"\u7fa4\u804a\u9875\u9762\u5b8c\u5584\u5bf9\u63a5"),(0,r.kt)("p",null,"\u5b89\u88c5\u4e00\u4e0b",(0,r.kt)("inlineCode",{parentName:"p"},"moment")," \u7528\u6765\u683c\u5f0f\u5316\u65f6\u95f4\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="apps/client"',title:'"apps/client"'},"pnpm i moment\n")),(0,r.kt)("p",null,"\u65b0\u5efa",(0,r.kt)("inlineCode",{parentName:"p"},"messages"),"\u6587\u4ef6\u5939\uff0c\u6dfb\u52a0\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"message-item.tsx"),"\u6587\u4ef6\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="apps/client/src/pages/conversation/messages/message-item.tsx"',title:'"apps/client/src/pages/conversation/messages/message-item.tsx"'},"import { forwardRef, memo, useMemo, useRef } from 'react'\nimport moment from 'moment'\nimport { Avatar, Image, cn } from '@nextui-org/react'\nimport { useAuthStore } from '@/stores'\nimport { GroupMessageType, GroupMessageVo } from '@ying-chat/shared'\n\ntype ChatMessageItemProps = {\n  message: GroupMessageVo\n}\n\nconst MessageItem = memo(\n  forwardRef<HTMLDivElement, ChatMessageItemProps>(\n    ({ message }, messageItemRef) => {\n      const userInfo = useAuthStore(state => state.userInfo)\n\n      const isCurrentUser = useMemo(() => {\n        return message.userId === userInfo?.id\n      }, [userInfo, message])\n\n      return (\n        <div\n          ref={messageItemRef}\n          className={cn(\n            'flex min-w-[400px] p-4',\n            'hover:bg-content2',\n            isCurrentUser && 'flex-row-reverse'\n          )}\n        >\n          <Avatar\n            className=\"flex-shrink-0 h-14 w-14\"\n            src={message.user.avatar?.url}\n          />\n          <div\n            className={cn(\n              'flex flex-col items-start mx-2',\n              isCurrentUser && 'items-end'\n            )}\n          >\n            <div\n              className={cn('flex mb-2', isCurrentUser && 'flex-row-reverse')}\n            >\n              <p className=\"text-sm font-semibold text-foreground-700\">\n                {message.user.nickname}\n              </p>\n              <p className=\"text-sm mx-2 text-foreground-500\">\n                {moment(message.createAt).format('YYYY-MM-DD HH:mm:ss')}\n              </p>\n            </div>\n            {message.type === GroupMessageType.Text && (\n              <p className=\"whitespace-pre-wrap text-foreground\">\n                {message.content}\n              </p>\n            )}\n            {message.type === GroupMessageType.Image && (\n              <Image\n                src={message.file?.url}\n                className=\"w-auto h-[200px] cursor-pointer\"\n              />\n            )}\n\n            {message.type === GroupMessageType.Video && (\n              <Image\n                className=\"w-auto h-[200px] cursor-pointer\"\n                src={message.cover?.url}\n              />\n            )}\n          </div>\n        </div>\n      )\n    }\n  ),\n  (prevProps, nextProps) => {\n    return prevProps.message.id === nextProps.message.id\n  }\n)\n\nexport const ChatMessageItem = ({ message }: ChatMessageItemProps) => {\n  const messageItemRef = useRef(null)\n\n  return <MessageItem ref={messageItemRef} message={message} />\n}\n")),(0,r.kt)("p",null,"\u5b9e\u73b0",(0,r.kt)("inlineCode",{parentName:"p"},"ChatMessages"),"\u7ec4\u4ef6\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="apps/client/src/pages/conversation/messages/messages.tsx"',title:'"apps/client/src/pages/conversation/messages/messages.tsx"'},"import { useCallback, useEffect, useRef, useState } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { CircularProgress } from '@nextui-org/react'\nimport { GroupMessageVo } from '@ying-chat/shared'\nimport { conversationApi } from '@/api'\nimport { ScollBox, ScollBoxHandle } from '@/components/scroll-box'\nimport { ChatMessageItem } from './message-item'\n\nconst SIZE = 30\n\nconst useMessages = () => {\n  const navigate = useNavigate()\n  const { groupId } = useParams()\n\n  const topMessageId = useRef(0)\n  const [messages, setMessageList] = useState<GroupMessageVo[]>([])\n  const [firstLoaded, setFirstLoaded] = useState(false)\n  const [loaded, setLoaded] = useState(false)\n\n  const addPrevMessage = useCallback((prevMessage: GroupMessageVo[]) => {\n    setMessageList(messages => [...prevMessage, ...messages])\n  }, [])\n\n  const addNewMessage = useCallback((newMessage: GroupMessageVo) => {\n    setMessageList(messages => [...messages, newMessage])\n  }, [])\n\n  const loadMessages = async (groupId: number, cursorId?: number) => {\n    const res = await conversationApi.getGroupConversationMessageList({\n      groupId,\n      size: SIZE,\n      cursorId: cursorId || undefined\n    })\n    if (!res.length || res.length < SIZE) {\n      setLoaded(true)\n    }\n    return res\n  }\n\n  useEffect(() => {\n    if (messages.length) {\n      topMessageId.current = messages[0].id\n    }\n  }, [messages])\n\n  const loadPrevMessages = useCallback(async () => {\n    console.log('loadPrevMessages')\n    if (!groupId) return\n    const res = await loadMessages(Number(groupId), topMessageId.current)\n    addPrevMessage(res.reverse())\n  }, [groupId, addPrevMessage])\n\n  const firstLoadMessages = useCallback(async () => {\n    console.log('firstLoadMessages', groupId)\n    if (!groupId) return\n    try {\n      const res = await loadMessages(Number(groupId))\n      setMessageList(res.reverse())\n      setFirstLoaded(true)\n    } catch (error) {\n      navigate('/conversation', { replace: true })\n    }\n  }, [groupId, navigate])\n\n  useEffect(() => {\n    firstLoadMessages()\n  }, [firstLoadMessages])\n\n  return {\n    messages,\n    firstLoaded,\n    loaded,\n    addNewMessage,\n    loadPrevMessages\n  }\n}\n\nexport const ChatMessages = () => {\n  const scrollBoxRef = useRef<ScollBoxHandle>(null)\n  const { messages, firstLoaded, loaded, loadPrevMessages } = useMessages()\n\n  useEffect(() => {\n    if (firstLoaded) {\n      scrollBoxRef.current?.scrollToBottom()\n    }\n  }, [firstLoaded])\n\n  const onTop = useCallback(() => {\n    if (!loaded) {\n      scrollBoxRef.current?.keepPosition(loadPrevMessages)\n    }\n  }, [loaded, loadPrevMessages])\n\n  return (\n    <div className=\"flex-1 h-[1px] relative\">\n      <ScollBox className=\"h-full\" ref={scrollBoxRef} onTop={onTop}>\n        <div className=\"w-full flex justify-center my-4\" aria-label=\"tip\">\n          {!loaded ? (\n            <CircularProgress aria-label=\"loading\" />\n          ) : (\n            <p className=\"text-sm text-foreground-500\">no more messages</p>\n          )}\n        </div>\n        {messages.map(el => (\n          <ChatMessageItem key={el.id} message={el} />\n        ))}\n      </ScollBox>\n    </div>\n  )\n}\n")),(0,r.kt)("p",null,"\u5148\u66f4\u65b0\u4e00\u4e0b",(0,r.kt)("inlineCode",{parentName:"p"},"utils.ts"),"\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/client/src/utils.ts"',title:'"apps/client/src/utils.ts"'},"// ...\nexport function createBlobURL(file: File) {\n  if (window.URL) {\n    return window.URL.createObjectURL(file)\n  } else if (window.webkitURL) {\n    return window.webkitURL.createObjectURL(file)\n  } else {\n    return ''\n  }\n}\n\nexport function getVideoFileCover(file: File): Promise<File> {\n  return new Promise((resolve, reject) => {\n    const videoUrl = createBlobURL(file)\n    const video = document.createElement('video')\n    video.src = videoUrl\n    video.currentTime = 0.5\n    video.onerror = reject\n    video.onloadeddata = () => {\n      const canvas = document.createElement('canvas'),\n        width = video.videoWidth,\n        height = video.videoHeight\n      canvas.width = width\n      canvas.height = height\n      canvas\n        .getContext('2d')\n        ?.drawImage(video, 0, 0, canvas.width, canvas.height)\n      canvas.toBlob(\n        blob => {\n          if (!blob) {\n            reject(blob)\n            return\n          }\n          resolve(new File([blob], 'cover', { type: 'image/jpeg' }))\n        },\n        'image/jpeg',\n        1\n      )\n    }\n  })\n}\n")),(0,r.kt)("p",null,"\u5b8c\u5584",(0,r.kt)("inlineCode",{parentName:"p"},"ConversationDetail"),"\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="apps/client/src/pages/conversation/conversation-detail.tsx"',title:'"apps/client/src/pages/conversation/conversation-detail.tsx"'},"import { useParams } from 'react-router-dom'\nimport { ChatInput } from '@/components/chat/chat-input'\nimport { conversationApi } from '@/api'\nimport { GroupMessageType } from '@ying-chat/shared'\nimport { getVideoFileCover } from '@/utils'\nimport { ChatMessages } from './messages/messages'\n\nexport const ConversationDetail = () => {\n  const { groupId } = useParams()\n\n  const onSend = async (type: GroupMessageType, content: string | File) => {\n    if (type === GroupMessageType.Text) {\n      await conversationApi.sendTextGroupMessage({\n        groupId: Number(groupId),\n        content: content as string\n      })\n    } else if (type === GroupMessageType.Image) {\n      await conversationApi.sendImageGroupMessage(content as File, groupId + '')\n    } else if (type === GroupMessageType.Video) {\n      const coverFile = await getVideoFileCover(content as File)\n      await conversationApi.sendVideoGroupMessage(\n        content as File,\n        coverFile,\n        groupId + ''\n      )\n    }\n  }\n\n  return (\n    <div className=\"h-full flex flex-col bg-content3\">\n      <ChatMessages />\n      <ChatInput onSend={onSend} />\n    </div>\n  )\n}\n")),(0,r.kt)("p",null,"\u4fee\u6539\u4e00\u4e0b",(0,r.kt)("inlineCode",{parentName:"p"},"scroll-box"),"\u6eda\u52a8\u6761\u7684\u6837\u5f0f\uff0c\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"index.css"),"\u6587\u4ef6\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="apps/client/src/index.css"',title:'"apps/client/src/index.css"'},"// ...\n.scroll-box::-webkit-scrollbar {\n  width: 14px;\n}\n\n.scroll-box::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  --tw-bg-opacity: 1;\n  background-color: hsl(\n    var(--nextui-content2) / var(--nextui-content2-opacity, var(--tw-bg-opacity))\n  );\n}\n\n.scroll-box::-webkit-scrollbar-track {\n  --tw-bg-opacity: 1;\n  background-color: hsl(\n    var(--nextui-content3) / var(--nextui-content3-opacity, var(--tw-bg-opacity))\n  );\n}\n")),(0,r.kt)("p",null,"\u6700\u540e\u53ef\u4ee5\u6574\u4f53\u6d4b\u8bd5\u4e00\u4e0b\u3002"),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(6365).Z,width:"1920",height:"1080"})),(0,r.kt)("p",null,"\u672c\u8282\u5230\u6b64\u7ed3\u675f\u3002"))}u.isMDXComponent=!0},1938:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/01-f34b64f969b697f0190ea4971dd274e3.gif"},6365:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/02-80a179d4919d8683408f8bdc8c9180ff.gif"}}]);