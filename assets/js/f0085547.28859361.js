"use strict";(self.webpackChunkying_blog=self.webpackChunkying_blog||[]).push([[2216],{9613:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var r=t(9496);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),u=p(t),m=s,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(g,i(i({ref:n},l),{},{components:t})):r.createElement(g,i({ref:n},l))}));function g(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,i=new Array(o);i[0]=m;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a[u]="string"==typeof e?e:s,i[1]=a;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5663:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var r=t(8957),s=(t(9496),t(9613));const o={id:"realtime-message-and-socket.io",sidebar_label:"\u4f7f\u7528socket.io\u5b9e\u73b0\u5373\u65f6\u901a\u8baf",title:"\u4f7f\u7528socket.io\u5b9e\u73b0\u5373\u65f6\u901a\u8baf"},i=void 0,a={unversionedId:"ying-chat/realtime-message-and-socket.io",id:"ying-chat/realtime-message-and-socket.io",title:"\u4f7f\u7528socket.io\u5b9e\u73b0\u5373\u65f6\u901a\u8baf",description:"\u672c\u8282\u6765\u5b9e\u73b0\u670d\u52a1\u7aef\u7684\u5373\u65f6\u901a\u8baf api\u3002",source:"@site/docs/ying-chat/19-realtime-message-and-socket.io.md",sourceDirName:"ying-chat",slug:"/ying-chat/realtime-message-and-socket.io",permalink:"/docs/ying-chat/realtime-message-and-socket.io",draft:!1,tags:[],version:"current",sidebarPosition:19,frontMatter:{id:"realtime-message-and-socket.io",sidebar_label:"\u4f7f\u7528socket.io\u5b9e\u73b0\u5373\u65f6\u901a\u8baf",title:"\u4f7f\u7528socket.io\u5b9e\u73b0\u5373\u65f6\u901a\u8baf"},sidebar:"yingChat",previous:{title:"\u9884\u89c8\u7ec4\u4ef6\u548c\u8def\u7531\u7f13\u5b58",permalink:"/docs/ying-chat/preview-component-and-router-cache"},next:{title:"\u5ba2\u6237\u7aef\u5bf9\u63a5\u5373\u65f6\u901a\u8baf",permalink:"/docs/ying-chat/docking-realtime-message"}},c={},p=[{value:"\u51c6\u5907",id:"\u51c6\u5907",level:3},{value:"ConversationGateway \u6dfb\u52a0",id:"conversationgateway-\u6dfb\u52a0",level:3},{value:"ConversationService \u4fee\u6539",id:"conversationservice-\u4fee\u6539",level:3},{value:"GroupService \u4fee\u6539",id:"groupservice-\u4fee\u6539",level:3}],l={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,s.kt)(u,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"\u672c\u8282\u6765\u5b9e\u73b0\u670d\u52a1\u7aef\u7684\u5373\u65f6\u901a\u8baf api\u3002"),(0,s.kt)("h3",{id:"\u51c6\u5907"},"\u51c6\u5907"),(0,s.kt)("p",null,"\u670d\u52a1\u7aef\u5b89\u88c5\u4f9d\u8d56"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="apps/server"',title:'"apps/server"'},"pnpm i @nestjs/websockets @nestjs/platform-socket.io socket.io\n")),(0,s.kt)("p",null,"\u5148\u5728 ",(0,s.kt)("inlineCode",{parentName:"p"},"redis")," \u91cc\u6dfb\u52a0\u4e00\u4e2a",(0,s.kt)("inlineCode",{parentName:"p"},"GroupUsers"),"\u7684 key\uff0c\u5230\u65f6\u7fa4\u91cc\u7528\u6237\u7684 id \u5c06\u5b58\u5230\u8fd9\u91cc\uff0c\u8fd9\u6837\u6bcf\u6b21\u53d1\u9001\u6d88\u606f\u65f6\u5c31\u4e0d\u7528\u67e5\u8be2\u6570\u636e\u5e93\u4e86\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/redis/constant.ts"',title:'"apps/server/src/modules/redis/constant.ts"'},"// ...\nexport const RedisKey = {\n  // ...\n  GroupUsers: 'group_users:'\n}\n")),(0,s.kt)("h3",{id:"conversationgateway-\u6dfb\u52a0"},"ConversationGateway \u6dfb\u52a0"),(0,s.kt)("p",null,"\u6dfb\u52a0\u4e00\u4e2a",(0,s.kt)("inlineCode",{parentName:"p"},"ConversationGateway"),"\u6587\u4ef6\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/conversation/conversation.gateway.ts"',title:'"apps/server/src/modules/conversation/conversation.gateway.ts"'},"import { Inject } from '@nestjs/common'\nimport {\n  ConnectedSocket,\n  MessageBody,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer\n} from '@nestjs/websockets'\nimport { RedisClientType } from 'redis'\nimport { Server, Socket } from 'socket.io'\nimport { Repository } from 'typeorm'\nimport { RedisKey, RedisToken } from '@/modules/redis/constant'\nimport { AuthService } from '@/modules/user/auth.service'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport {\n  GroupEntity,\n  GroupConversationEntity,\n  GroupMessageEntity\n} from '@/modules/db/entities'\n\ndeclare module 'socket.io' {\n  interface Socket {\n    userId: number\n  }\n}\n\n@WebSocketGateway()\nexport class ConversationGateway\n  implements OnGatewayConnection, OnGatewayDisconnect\n{\n  @Inject()\n  private readonly authService: AuthService\n  @Inject(RedisToken)\n  private readonly redisClient: RedisClientType\n\n  @InjectRepository(GroupEntity)\n  private readonly groupRepository: Repository<GroupEntity>\n  @InjectRepository(GroupConversationEntity)\n  private readonly groupConversationRepository: Repository<GroupConversationEntity>\n\n  @WebSocketServer() server: Server\n\n  private userClientMap: Map<number, string> = new Map()\n\n  afterInit() {\n    this.initGroupMap()\n  }\n\n  async initGroupMap() {\n    const groups = await this.groupRepository.find({\n      relations: ['users']\n    })\n    groups.forEach(group => {\n      group.users.forEach(user => {\n        this.redisClient.sAdd(`${RedisKey.GroupUsers}${group.id}`, user.id + '')\n      })\n    })\n  }\n\n  async handleConnection(client: Socket) {\n    const token = client.handshake.headers.authorization\n\n    try {\n      const verifyData = this.authService.verify(token)\n      const id = Number(await this.redisClient.get(token))\n\n      if (id === verifyData.id) {\n        client.userId = id\n        this.userClientMap.set(client.userId, client.id)\n        return\n      }\n      this.authFail(client)\n    } catch {\n      this.authFail(client)\n    }\n  }\n\n  handleDisconnect(client: Socket) {\n    this.userClientMap.delete(client.userId)\n  }\n\n  authFail(client: Socket) {\n    client.emit('authFail')\n    client.disconnect(true)\n  }\n\n  @SubscribeMessage('update-last-msg')\n  async updateLastMsg(\n    @ConnectedSocket() client: Socket,\n    @MessageBody() data: { id: number; messageId: number }\n  ) {\n    await this.groupConversationRepository.update(\n      { id: data.id, userId: client.userId },\n      { lastMsgId: data.messageId }\n    )\n\n    const groupConversation = await this.groupConversationRepository.findOne({\n      where: { id: data.id, userId: client.userId }\n    })\n\n    return {\n      event: 'update-last-msg',\n      data: groupConversation\n    }\n  }\n\n  async sendMsgToGroup(groupMsg: GroupMessageEntity) {\n    const userIds = await this.redisClient.sMembers(\n      `${RedisKey.GroupUsers}${groupMsg.groupId}`\n    )\n\n    userIds.forEach(userId => {\n      const clientId = this.userClientMap.get(+userId)\n      if (clientId) {\n        this.server\n          .to(clientId)\n          .emit(`group-message:${groupMsg.groupId}`, groupMsg)\n      }\n    })\n  }\n}\n")),(0,s.kt)("p",null,"websocket \u8fde\u63a5\u662f\u7531 http \u8bf7\u6c42 upgrade \u6210\u529f\u540e\u521b\u5efa\uff0c\u5bf9\u5e94\u4e8e gateway \u7684 handleConnection \u65b9\u6cd5\uff0c\u800c nest \u7684 guard \u672c\u8eab\u4e5f\u9002\u7528\u4e8e gateway\uff0c\u4f46\u4e0d\u5e78\u7684\u662f\u53ea\u4f5c\u7528\u4e8e@SubscribeMessage \u88c5\u9970\u7684\u65b9\u6cd5\uff0c\u8fde\u63a5\u7684\u751f\u547d\u5468\u671f\u4e8b\u4ef6\u4e0d\u53d7\u5f71\u54cd\uff0c\u6240\u4ee5\u9700\u8981\u5728 handleConnection \u4e2d\u5355\u72ec\u505a\u9274\u6743\uff0c\u5176\u4ed6 @SubscribeMessage \u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7 guard \u7edf\u4e00\u5904\u7406\u3002"),(0,s.kt)("p",null,"\u5728",(0,s.kt)("inlineCode",{parentName:"p"},"ConversationModule"),"\u91cc\u5f15\u5165\u4e00\u4e0b\uff0c\u56e0\u4e3a",(0,s.kt)("inlineCode",{parentName:"p"},"ConversationGateway"),"\u4f7f\u7528\u5230\u4e86",(0,s.kt)("inlineCode",{parentName:"p"},"AuthService"),"\uff0c\u6240\u4ee5\u8fd8\u8981\u628a",(0,s.kt)("inlineCode",{parentName:"p"},"UserModule"),"\u5f15\u5165\u4e00\u4e0b\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/conversation/conversation.module.ts"',title:'"apps/server/src/modules/conversation/conversation.module.ts"'},"// ...\nimport { ConversationGateway } from './conversation.gateway'\nimport { UserModule } from '@/modules/user/user.module'\n\n@Module({\n  imports: [\n    //...\n    UserModule\n  ],\n  // ...\n  providers: [\n    // ...\n    ConversationGateway\n  ]\n})\nexport class ConversationModule {}\n")),(0,s.kt)("h3",{id:"conversationservice-\u4fee\u6539"},"ConversationService \u4fee\u6539"),(0,s.kt)("p",null,"\u4fee\u6539\u4e00\u4e0b",(0,s.kt)("inlineCode",{parentName:"p"},"ConversationService"),"\uff0c\u8ba9\u6240\u6709\u53d1\u9001\u6d88\u606f\u7684\u63a5\u53e3\u53d1\u9001\u5b8c\u540e\u901a\u77e5 socket \u53bb\u53d1\u9001\u5230\u5f53\u524d\u8fde\u63a5\u7684\u7528\u6237\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/conversation/conversation.service.ts"',title:'"apps/server/src/modules/conversation/conversation.service.ts"'},"// ...\nimport { ConversationGateway } from './conversation.gateway'\n\n@Injectable()\nexport class ConversationService {\n  // ...\n\n  @Inject()\n  private readonly conversationGateway: ConversationGateway\n\n  // ...\n\n  async sendTextGroupMessage() {\n    // ...\n    const res = await this.groupMessageRepository.save(message)\n\n    this.sendMsgToGroup(res.id) // +\n\n    return res\n  }\n\n  async sendImageGroupMessage() {\n    // ...\n\n    const res = await this.groupMessageRepository.save(message)\n\n    this.sendMsgToGroup(res.id) // +\n\n    return res\n  }\n\n  async sendVideoGroupMessage() {\n    // ...\n\n    const res = await this.groupMessageRepository.save(message)\n\n    this.sendMsgToGroup(res.id) // +\n\n    return res\n  }\n\n  // ...\n\n  async sendMsgToGroup(id: number) {\n    const newMessage = await this.groupMessageRepository.findOne({\n      where: { id },\n      relations: ['user', 'user.avatar', 'file', 'cover']\n    })\n\n    this.conversationGateway.sendMsgToGroup(newMessage)\n  }\n}\n")),(0,s.kt)("h3",{id:"groupservice-\u4fee\u6539"},"GroupService \u4fee\u6539"),(0,s.kt)("p",null,"\u6700\u540e\u518d\u4fee\u6539\u4e00\u4e0b",(0,s.kt)("inlineCode",{parentName:"p"},"GroupService"),"\uff0c\u8ba9\u5efa\u7fa4\u548c\u52a0\u7fa4\u65f6",(0,s.kt)("inlineCode",{parentName:"p"},"redis"),"\u4e0a\u7684\u7fa4\u7528\u6237 id \u80fd\u66f4\u65b0\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="apps/server/src/modules/group/group.service.ts"',title:'"apps/server/src/modules/group/group.service.ts"'},"// ...\nimport { RedisClientType } from 'redis'\nimport { RedisKey, RedisToken } from '@/modules/redis/constant'\n\n@Injectable()\nexport class GroupService {\n  // ...\n\n  @Inject(RedisToken)\n  private readonly redisClient: RedisClientType\n\n  async create(createGroupDto: CreateGroupDto, userId: number) {\n    // ...\n    await this.redisClient.sAdd(\n      `${RedisKey.GroupUsers}${group.id}`,\n      userId + ''\n    )\n\n    return group\n  }\n  // ...\n\n  async joinGroup(userId: number, inviteCode: string) {\n    // ...\n    await this.redisClient.sAdd(\n      `${RedisKey.GroupUsers}${group.id}`,\n      userId + ''\n    )\n  }\n  // ...\n}\n")),(0,s.kt)("p",null,"\u90a3\u4e48\u672c\u8282\u5230\u6b64\u7ed3\u675f\uff0c\u4e0b\u8282\u5c06\u5728\u5ba2\u6237\u7aef\u5bf9\u63a5\u5373\u65f6\u901a\u4fe1\u3002"))}d.isMDXComponent=!0}}]);