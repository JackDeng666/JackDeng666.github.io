"use strict";(self.webpackChunkying_blog=self.webpackChunkying_blog||[]).push([[9235],{9976:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>u});var s=n(3274),t=n(9128);const o={id:"message-api",sidebar_label:"\u7fa4\u804a api",title:"\u7fa4\u804a api"},i=void 0,a={id:"ying-chat/message-api",title:"\u7fa4\u804a api",description:"\u672c\u8282\u6765\u5b9e\u73b0\u7fa4\u6d88\u606f\u76f8\u5173\u7684\u6240\u6709 api\u3002",source:"@site/docs/ying-chat/16-message-api.md",sourceDirName:"ying-chat",slug:"/ying-chat/message-api",permalink:"/docs/ying-chat/message-api",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:16,frontMatter:{id:"message-api",sidebar_label:"\u7fa4\u804a api",title:"\u7fa4\u804a api"},sidebar:"yingChat",previous:{title:"\u5ba2\u6237\u7aef\u5bf9\u63a5\u7fa4\u7ec4api",permalink:"/docs/ying-chat/docking-group-api"},next:{title:"\u5ba2\u6237\u7aef\u5bf9\u63a5\u7fa4\u804aapi",permalink:"/docs/ying-chat/docking-message-api"}},p={},u=[{value:"\u51c6\u5907",id:"\u51c6\u5907",level:2},{value:"\u679a\u4e3e",id:"\u679a\u4e3e",level:3},{value:"\u5b9e\u4f53",id:"\u5b9e\u4f53",level:3},{value:"DTO",id:"dto",level:3},{value:"\u5b9e\u73b0",id:"\u5b9e\u73b0",level:2},{value:"service",id:"service",level:3},{value:"controller",id:"controller",level:3},{value:"subscriber",id:"subscriber",level:3},{value:"\u52a0\u8f7d",id:"\u52a0\u8f7d",level:3}];function l(r){const e={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...r.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:"\u672c\u8282\u6765\u5b9e\u73b0\u7fa4\u6d88\u606f\u76f8\u5173\u7684\u6240\u6709 api\u3002"}),"\n",(0,s.jsx)(e.h2,{id:"\u51c6\u5907",children:"\u51c6\u5907"}),"\n",(0,s.jsx)(e.h3,{id:"\u679a\u4e3e",children:"\u679a\u4e3e"}),"\n",(0,s.jsxs)(e.p,{children:["\u5728",(0,s.jsx)(e.code,{children:"group.enum.ts"}),"\u6dfb\u52a0\u4e00\u4e2a",(0,s.jsx)(e.code,{children:"GroupMessageType"}),"\u679a\u4e3e\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title="packages/shared/src/enum/group.enum.ts"',children:"// ...\r\nexport enum GroupMessageType {\r\n  Text,\r\n  Image,\r\n  Video\r\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\u5b9e\u4f53",children:"\u5b9e\u4f53"}),"\n",(0,s.jsxs)(e.p,{children:["\u6dfb\u52a0\u4e00\u4e2a",(0,s.jsx)(e.code,{children:"GroupMessageEntity"}),"\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title="apps/server/src/modules/db/entities/group-message.entity.ts"',children:"import { Column, Entity, JoinColumn, ManyToOne, OneToOne } from 'typeorm'\r\nimport { GroupMessageType } from '@ying-chat/shared'\r\nimport { BaseEntity } from './base.entity'\r\nimport { UserEntity } from './user.entity'\r\nimport { FileEntity } from './file.entity'\r\n\r\n@Entity({ name: 'group_message' })\r\nexport class GroupMessageEntity extends BaseEntity {\r\n  @Column({\r\n    type: 'enum',\r\n    enum: GroupMessageType,\r\n    comment: '0 Text; 1 Image; 2 Video'\r\n  })\r\n  type: GroupMessageType\r\n\r\n  @Column({\r\n    type: 'text',\r\n    nullable: true\r\n  })\r\n  content?: string\r\n\r\n  @Column()\r\n  userId: number\r\n\r\n  @ManyToOne(() => UserEntity)\r\n  @JoinColumn()\r\n  user: UserEntity\r\n\r\n  @Column()\r\n  groupId: number\r\n\r\n  @Column({\r\n    nullable: true\r\n  })\r\n  coverId?: number\r\n\r\n  @OneToOne(() => FileEntity)\r\n  @JoinColumn()\r\n  cover?: FileEntity\r\n\r\n  @Column({\r\n    nullable: true\r\n  })\r\n  fileId?: number\r\n\r\n  @OneToOne(() => FileEntity)\r\n  @JoinColumn()\r\n  file?: FileEntity\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"\u5bfc\u51fa\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title="apps/server/src/modules/db/entities/index.ts"',children:"// ...\r\nexport * from './group-message.entity'\n"})}),"\n",(0,s.jsxs)(e.p,{children:["\u4fee\u6539\u4e00\u4e0b",(0,s.jsx)(e.code,{children:"GroupConversationEntity"}),"\uff0c\u52a0\u4e86\u4e00\u4e2a",(0,s.jsx)(e.code,{children:"recentMsg"}),"\u4f5c\u4e3a\u5f53\u524d\u7fa4\u804a\u91cc\u7684\u6700\u65b0\u6d88\u606f\uff0c\u4f1a\u5728\u83b7\u53d6\u5217\u8868\u65f6\u8bfb\u53d6\u8fd4\u56de\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title=""',children:"// ...\r\nimport { GroupMessageEntity } from './group-message.entity'\r\n\r\n@Entity({ name: 'group_conversation' })\r\nexport class GroupConversationEntity extends BaseEntity {\r\n  // ...\r\n\r\n  recentMsg?: GroupMessageEntity\r\n\r\n  // ...\r\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"dto",children:"DTO"}),"\n",(0,s.jsx)(e.p,{children:"\u53d1\u9001\u6d88\u606f\u5230\u7fa4\u91cc\u7684 DTO\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title="packages/shared/src/dto/send-msg.dto.ts"',children:"import { IsNotEmpty, MaxLength } from 'class-validator'\r\n\r\nexport class SendMsgDto {\r\n  @IsNotEmpty()\r\n  groupId: number\r\n\r\n  @MaxLength(5000)\r\n  @IsNotEmpty()\r\n  content: string\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"\u83b7\u53d6\u7fa4\u6d88\u606f\u5217\u8868\u7684 DTO\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title="packages/shared/src/dto/group-message-list.dto.ts"',children:"import { IsNotEmpty, IsOptional } from 'class-validator'\r\n\r\nexport class GroupMessageListDto {\r\n  @IsNotEmpty()\r\n  groupId: number\r\n\r\n  @IsOptional()\r\n  curId?: number\r\n\r\n  @IsOptional()\r\n  size?: number\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"\u5bfc\u51fa\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title="packages/shared/src/dto/index.ts"',children:"// ...\r\nexport * from './send-msg.dto'\r\nexport * from './group-message-list.dto'\n"})}),"\n",(0,s.jsx)(e.h2,{id:"\u5b9e\u73b0",children:"\u5b9e\u73b0"}),"\n",(0,s.jsx)(e.h3,{id:"service",children:"service"}),"\n",(0,s.jsxs)(e.p,{children:["\u5728",(0,s.jsx)(e.code,{children:"modules"}),"\u4e0b\u65b0\u5efa\u4e00\u4e2a",(0,s.jsx)(e.code,{children:"conversation"}),"\u6587\u4ef6\u5939\uff0c\u5148\u6765\u5b9e\u73b0\u4e00\u4e2a",(0,s.jsx)(e.code,{children:"ConversationService"}),"\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title="apps/server/src/modules/conversation/conversation.service.ts"',children:"import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common'\r\nimport { InjectRepository } from '@nestjs/typeorm'\r\nimport { LessThan, MoreThan, Repository } from 'typeorm'\r\nimport {\r\n  FileType,\r\n  GroupMessageListDto,\r\n  GroupMessageType,\r\n  SendMsgDto\r\n} from '@ying-chat/shared'\r\nimport { FileService } from '@/modules/file/file.service'\r\nimport {\r\n  GroupConversationEntity,\r\n  GroupMessageEntity\r\n} from '@/modules/db/entities'\r\n\r\n@Injectable()\r\nexport class ConversationService {\r\n  @InjectRepository(GroupConversationEntity)\r\n  private readonly groupConversationRepository: Repository<GroupConversationEntity>\r\n\r\n  @InjectRepository(GroupMessageEntity)\r\n  private readonly groupMessageRepository: Repository<GroupMessageEntity>\r\n\r\n  @Inject()\r\n  private readonly fileService: FileService\r\n\r\n  async getGroupConversationList(userId: number) {\r\n    const res = await this.groupConversationRepository.find({\r\n      where: {\r\n        userId\r\n      },\r\n      relations: ['group', 'group.cover'],\r\n      order: {\r\n        updateAt: 'DESC'\r\n      }\r\n    })\r\n    return res\r\n  }\r\n\r\n  async getGroupConversationMessageList(\r\n    userId: number,\r\n    groupMessageListDto: GroupMessageListDto\r\n  ) {\r\n    await this.checkUserInGroup(userId, groupMessageListDto.groupId)\r\n\r\n    return this.groupMessageRepository.find({\r\n      where: {\r\n        groupId: groupMessageListDto.groupId,\r\n        id: groupMessageListDto.cursorId\r\n          ? LessThan(groupMessageListDto.cursorId)\r\n          : undefined\r\n      },\r\n      order: {\r\n        id: 'DESC'\r\n      },\r\n      take: groupMessageListDto.size || 10,\r\n      relations: ['user', 'user.avatar', 'file', 'cover']\r\n    })\r\n  }\r\n\r\n  async sendTextGroupMessage(userId: number, sendMsgDto: SendMsgDto) {\r\n    await this.checkUserInGroup(userId, sendMsgDto.groupId)\r\n\r\n    const message = new GroupMessageEntity()\r\n    message.userId = userId\r\n    message.groupId = sendMsgDto.groupId\r\n    message.content = sendMsgDto.content\r\n    message.type = GroupMessageType.Text\r\n\r\n    const res = await this.groupMessageRepository.save(message)\r\n\r\n    return res\r\n  }\r\n\r\n  async sendImageGroupMessage(\r\n    userId: number,\r\n    groupId: number,\r\n    file: Express.Multer.File\r\n  ) {\r\n    await this.checkUserInGroup(userId, groupId)\r\n\r\n    const minioFile = await this.fileService.uploadFile({\r\n      file,\r\n      fileType: FileType.Image,\r\n      userId\r\n    })\r\n\r\n    const message = new GroupMessageEntity()\r\n    message.userId = userId\r\n    message.groupId = groupId\r\n    message.type = GroupMessageType.Image\r\n    message.fileId = minioFile.id\r\n\r\n    const res = await this.groupMessageRepository.save(message)\r\n\r\n    return res\r\n  }\r\n\r\n  async sendVideoGroupMessage(\r\n    userId: number,\r\n    groupId: number,\r\n    videoFile: Express.Multer.File,\r\n    coverFile: Express.Multer.File\r\n  ) {\r\n    await this.checkUserInGroup(userId, groupId)\r\n\r\n    const [minioVideoFile, minioCoverFile] = await Promise.all([\r\n      this.fileService.uploadFile({\r\n        file: videoFile,\r\n        fileType: FileType.Video,\r\n        userId\r\n      }),\r\n      this.fileService.uploadFile({\r\n        file: coverFile,\r\n        fileType: FileType.Cover,\r\n        userId\r\n      })\r\n    ])\r\n\r\n    const message = new GroupMessageEntity()\r\n    message.userId = userId\r\n    message.groupId = groupId\r\n    message.type = GroupMessageType.Video\r\n    message.fileId = minioVideoFile.id\r\n    message.coverId = minioCoverFile.id\r\n\r\n    const res = await this.groupMessageRepository.save(message)\r\n\r\n    return res\r\n  }\r\n\r\n  async checkUserInGroup(userId: number, groupId: number) {\r\n    const exist = await this.groupConversationRepository.findOne({\r\n      where: {\r\n        userId,\r\n        groupId\r\n      }\r\n    })\r\n    if (!exist) {\r\n      throw new HttpException(\r\n        'you are not in the group!',\r\n        HttpStatus.NOT_ACCEPTABLE\r\n      )\r\n    }\r\n  }\r\n\r\n  findRecentGroupMessage(groupId: number) {\r\n    return this.groupMessageRepository.findOne({\r\n      where: {\r\n        groupId\r\n      },\r\n      order: {\r\n        id: 'DESC'\r\n      },\r\n      relations: ['user']\r\n    })\r\n  }\r\n\r\n  findUnreadGroupMessageNum(groupId: number, lastMsgId: number) {\r\n    return this.groupMessageRepository.count({\r\n      where: {\r\n        groupId,\r\n        id: MoreThan(lastMsgId)\r\n      }\r\n    })\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"controller",children:"controller"}),"\n",(0,s.jsxs)(e.p,{children:["\u7f16\u5199",(0,s.jsx)(e.code,{children:"ConversationController"}),"\uff0c\u76f4\u63a5\u5b9e\u73b0\u83b7\u53d6\u7528\u6237\u5bf9\u8bdd\u5217\u8868\uff0c\u7528\u6237\u6d88\u606f\u5217\u8868\u548c\u53d1\u9001\u6587\u5b57\u3001\u56fe\u7247\u3001\u89c6\u9891\u6d88\u606f\u7684\u63a5\u53e3\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title="apps/server/src/modules/conversation/conversation.controller.ts"',children:"import {\r\n  Body,\r\n  Controller,\r\n  FileTypeValidator,\r\n  Get,\r\n  HttpException,\r\n  HttpStatus,\r\n  MaxFileSizeValidator,\r\n  ParseFilePipe,\r\n  Post,\r\n  Query,\r\n  Req,\r\n  UploadedFile,\r\n  UploadedFiles,\r\n  UseInterceptors\r\n} from '@nestjs/common'\r\nimport { Request } from 'express'\r\nimport { ApiOperation, ApiTags } from '@nestjs/swagger'\r\nimport { AnyFilesInterceptor, FileInterceptor } from '@nestjs/platform-express'\r\nimport { GroupMessageListDto, SendMsgDto } from '@ying-chat/shared'\r\nimport { ConversationService } from './conversation.service'\r\n\r\n@ApiTags('conversation')\r\n@Controller('conversation')\r\nexport class ConversationController {\r\n  constructor(private readonly conversationService: ConversationService) {}\r\n\r\n  @ApiOperation({\r\n    summary: 'Get conversation list'\r\n  })\r\n  @Get('list')\r\n  getGroupConversationList(@Req() req: Request) {\r\n    return this.conversationService.getGroupConversationList(req.userId)\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: 'Get group message list'\r\n  })\r\n  @Get('group/message/list')\r\n  getGroupConversationMessageList(\r\n    @Req() req: Request,\r\n    @Query() groupMessageListDto: GroupMessageListDto\r\n  ) {\r\n    return this.conversationService.getGroupConversationMessageList(\r\n      req.userId,\r\n      groupMessageListDto\r\n    )\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: 'Send text message to group'\r\n  })\r\n  @Post('group/message/text')\r\n  sendTextGroupMessage(@Req() req: Request, @Body() sendMsgDto: SendMsgDto) {\r\n    return this.conversationService.sendTextGroupMessage(req.userId, sendMsgDto)\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: 'Send image message to group'\r\n  })\r\n  @Post('group/message/image')\r\n  @UseInterceptors(FileInterceptor('file'))\r\n  sendImageGroupMessage(\r\n    @Req() req: Request,\r\n    @UploadedFile(\r\n      new ParseFilePipe({\r\n        validators: [\r\n          new MaxFileSizeValidator({\r\n            maxSize: 10 * 1024 * 1024,\r\n            message: 'size must less than 10MB'\r\n          }),\r\n          new FileTypeValidator({ fileType: /image\\/(png|jpeg|jpg)/ })\r\n        ]\r\n      })\r\n    )\r\n    file: Express.Multer.File,\r\n    @Body('groupId') groupId: string\r\n  ) {\r\n    return this.conversationService.sendImageGroupMessage(\r\n      req.userId,\r\n      +groupId,\r\n      file\r\n    )\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: 'Send video message to group'\r\n  })\r\n  @Post('group/message/video')\r\n  @UseInterceptors(AnyFilesInterceptor())\r\n  sendVideoGroupMessage(\r\n    @Req() req: Request,\r\n    @UploadedFiles()\r\n    files: Express.Multer.File[],\r\n    @Body('groupId') groupId: number\r\n  ) {\r\n    const videoFile = files[0]\r\n    const coverFile = files[1]\r\n\r\n    if (videoFile.size > 1024 * 1024 * 1024) {\r\n      throw new HttpException(\r\n        'video size must be less than 1GB',\r\n        HttpStatus.NOT_ACCEPTABLE\r\n      )\r\n    }\r\n\r\n    if (coverFile.size > 5 * 1024 * 1024) {\r\n      throw new HttpException(\r\n        'cover size must be less than 5MB',\r\n        HttpStatus.NOT_ACCEPTABLE\r\n      )\r\n    }\r\n\r\n    return this.conversationService.sendVideoGroupMessage(\r\n      req.userId,\r\n      +groupId,\r\n      videoFile,\r\n      coverFile\r\n    )\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"subscriber",children:"subscriber"}),"\n",(0,s.jsxs)(e.p,{children:["\u7f16\u5199",(0,s.jsx)(e.code,{children:"GroupConversationSubscriber"}),"\uff0c\u8ba9\u7528\u6237\u52a0\u8f7d\u4f1a\u8bdd\u65f6\uff0c\u83b7\u53d6\u6700\u65b0\u7684\u4fe1\u606f\u548c\u5b83\u7684\u6d88\u606f\u672a\u8bfb\u6570\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title="apps/server/src/modules/conversation/conversation.subscriber.ts"',children:"import { DataSource, EntitySubscriberInterface, EventSubscriber } from 'typeorm'\r\nimport { GroupConversationEntity } from '@/modules/db/entities'\r\nimport { ConversationService } from './conversation.service'\r\n\r\n@EventSubscriber()\r\nexport class GroupConversationSubscriber\r\n  implements EntitySubscriberInterface<GroupConversationEntity>\r\n{\r\n  constructor(\r\n    dataSource: DataSource,\r\n    private conversationService: ConversationService\r\n  ) {\r\n    dataSource.subscribers.push(this)\r\n  }\r\n\r\n  listenTo() {\r\n    return GroupConversationEntity\r\n  }\r\n\r\n  async afterLoad(entity: GroupConversationEntity) {\r\n    entity.recentMsg = await this.conversationService.findRecentGroupMessage(\r\n      entity.groupId\r\n    )\r\n\r\n    if (entity.lastMsgId) {\r\n      entity.unreadNum =\r\n        await this.conversationService.findUnreadGroupMessageNum(\r\n          entity.groupId,\r\n          entity.lastMsgId\r\n        )\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\u52a0\u8f7d",children:"\u52a0\u8f7d"}),"\n",(0,s.jsxs)(e.p,{children:["\u521b\u5efa",(0,s.jsx)(e.code,{children:"ConversationModule"}),"\u52a0\u8f7d",(0,s.jsx)(e.code,{children:"ConversationController"}),"\u548c",(0,s.jsx)(e.code,{children:"ConversationService"}),"\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title="apps/server/src/modules/conversation/conversation.module.ts"',children:"import { Module } from '@nestjs/common'\r\nimport { TypeOrmModule } from '@nestjs/typeorm'\r\nimport {\r\n  GroupEntity,\r\n  GroupConversationEntity,\r\n  GroupMessageEntity\r\n} from '@/modules/db/entities'\r\nimport { ConversationService } from './conversation.service'\r\nimport { ConversationController } from './conversation.controller'\r\nimport { GroupConversationSubscriber } from './conversation.subscriber'\r\n\r\n@Module({\r\n  imports: [\r\n    TypeOrmModule.forFeature([\r\n      GroupEntity,\r\n      GroupConversationEntity,\r\n      GroupMessageEntity\r\n    ])\r\n  ],\r\n  controllers: [ConversationController],\r\n  providers: [ConversationService, GroupConversationSubscriber]\r\n})\r\nexport class ConversationModule {}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["\u6700\u540e\u5728",(0,s.jsx)(e.code,{children:"AppModule"}),"\u91cc\u5bfc\u5165\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title="apps/server/src/app.module.ts"',children:"// ...\r\nimport { ConversationModule } from '@/modules/conversation/conversation.module'\r\n\r\n@Module({\r\n  imports: [\r\n    // ...\r\n    ConversationModule\r\n  ]\r\n  // ...\r\n})\r\nexport class AppModule {}\n"})}),"\n",(0,s.jsx)(e.p,{children:"\u90a3\u4e48\u672c\u8282\u6700\u540e\u5c31\u4e0d\u53bb\u8c03\u8bd5\u63a5\u53e3\u4e86\uff0c\u5728\u540e\u9762\u4e00\u8282\u5ba2\u6237\u7aef\u76f4\u63a5\u5bf9\u63a5\u4e00\u4e0b\uff0c\u672c\u8282\u5230\u6b64\u7ed3\u675f\u3002"})]})}function d(r={}){const{wrapper:e}={...(0,t.R)(),...r.components};return e?(0,s.jsx)(e,{...r,children:(0,s.jsx)(l,{...r})}):l(r)}},9128:(r,e,n)=>{n.d(e,{R:()=>i,x:()=>a});var s=n(9474);const t={},o=s.createContext(t);function i(r){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof r?r(e):{...e,...r}}),[e,r])}function a(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(t):r.components||t:i(r.components),s.createElement(o.Provider,{value:e},r.children)}}}]);